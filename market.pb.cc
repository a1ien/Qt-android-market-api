// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "market.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AppsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppsRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AppsRequest_OrderType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AppsRequest_ViewType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AppsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Category_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Category_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommentsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommentsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommentsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommentsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  App_reflection_ = NULL;
const ::google::protobuf::Descriptor* App_ExtendedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  App_ExtendedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Comment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Comment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CategoriesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CategoriesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CategoriesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CategoriesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubCategoriesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubCategoriesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubCategoriesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubCategoriesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetImageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetImageRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetImageRequest_AppImageUsage_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetAssetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAssetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetImageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetImageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAssetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAssetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAssetResponse_InstallAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAssetResponse_InstallAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_RequestGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_RequestGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseContext_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseContext_ResultType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_ResponseGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_ResponseGroup_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AppType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_market_2eproto() {
  protobuf_AddDesc_market_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "market.proto");
  GOOGLE_CHECK(file != NULL);
  AppsRequest_descriptor_ = file->message_type(0);
  static const int AppsRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, categoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, withextendedinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, startindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, entriescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, viewtype_),
  };
  AppsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppsRequest_descriptor_,
      AppsRequest::default_instance_,
      AppsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppsRequest));
  AppsRequest_OrderType_descriptor_ = AppsRequest_descriptor_->enum_type(0);
  AppsRequest_ViewType_descriptor_ = AppsRequest_descriptor_->enum_type(1);
  AppsResponse_descriptor_ = file->message_type(1);
  static const int AppsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsResponse, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsResponse, entriescount_),
  };
  AppsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppsResponse_descriptor_,
      AppsResponse::default_instance_,
      AppsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppsResponse));
  Category_descriptor_ = file->message_type(2);
  static const int Category_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, categoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, subtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, subcategories_),
  };
  Category_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Category_descriptor_,
      Category::default_instance_,
      Category_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Category));
  CommentsRequest_descriptor_ = file->message_type(3);
  static const int CommentsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentsRequest, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentsRequest, startindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentsRequest, entriescount_),
  };
  CommentsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommentsRequest_descriptor_,
      CommentsRequest::default_instance_,
      CommentsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommentsRequest));
  CommentsResponse_descriptor_ = file->message_type(4);
  static const int CommentsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentsResponse, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentsResponse, entriescount_),
  };
  CommentsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommentsResponse_descriptor_,
      CommentsResponse::default_instance_,
      CommentsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommentsResponse));
  App_descriptor_ = file->message_type(5);
  static const int App_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, ratingscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, extendedinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, packagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, versioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, pricecurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, pricemicros_),
  };
  App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      App_descriptor_,
      App::default_instance_,
      App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(App));
  App_ExtendedInfo_descriptor_ = App_descriptor_->nested_type(0);
  static const int App_ExtendedInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, downloadscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, permissionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, installsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, packagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, contactemail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, downloadscounttext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, contactphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, contactwebsite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, screenshotscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, promotext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, recentchanges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, promotionalvideo_),
  };
  App_ExtendedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      App_ExtendedInfo_descriptor_,
      App_ExtendedInfo::default_instance_,
      App_ExtendedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App_ExtendedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(App_ExtendedInfo));
  Comment_descriptor_ = file->message_type(6);
  static const int Comment_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, authorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, creationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, authorid_),
  };
  Comment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Comment_descriptor_,
      Comment::default_instance_,
      Comment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Comment));
  CategoriesRequest_descriptor_ = file->message_type(7);
  static const int CategoriesRequest_offsets_[1] = {
  };
  CategoriesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CategoriesRequest_descriptor_,
      CategoriesRequest::default_instance_,
      CategoriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoriesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CategoriesRequest));
  CategoriesResponse_descriptor_ = file->message_type(8);
  static const int CategoriesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoriesResponse, categories_),
  };
  CategoriesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CategoriesResponse_descriptor_,
      CategoriesResponse::default_instance_,
      CategoriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoriesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoriesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CategoriesResponse));
  SubCategoriesRequest_descriptor_ = file->message_type(9);
  static const int SubCategoriesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCategoriesRequest, apptype_),
  };
  SubCategoriesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubCategoriesRequest_descriptor_,
      SubCategoriesRequest::default_instance_,
      SubCategoriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCategoriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCategoriesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubCategoriesRequest));
  SubCategoriesResponse_descriptor_ = file->message_type(10);
  static const int SubCategoriesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCategoriesResponse, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCategoriesResponse, subcategorydisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCategoriesResponse, subcategoryid_),
  };
  SubCategoriesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubCategoriesResponse_descriptor_,
      SubCategoriesResponse::default_instance_,
      SubCategoriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCategoriesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubCategoriesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubCategoriesResponse));
  RequestContext_descriptor_ = file->message_type(11);
  static const int RequestContext_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, authsubtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, issecure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, androidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, deviceandsdkversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, userlanguage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, usercountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, operatoralpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, simoperatoralpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, operatornumeric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, simoperatornumeric_),
  };
  RequestContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestContext_descriptor_,
      RequestContext::default_instance_,
      RequestContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestContext));
  GetImageRequest_descriptor_ = file->message_type(12);
  static const int GetImageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageRequest, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageRequest, imageusage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageRequest, imageid_),
  };
  GetImageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetImageRequest_descriptor_,
      GetImageRequest::default_instance_,
      GetImageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetImageRequest));
  GetImageRequest_AppImageUsage_descriptor_ = GetImageRequest_descriptor_->enum_type(0);
  GetAssetRequest_descriptor_ = file->message_type(13);
  static const int GetAssetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetRequest, assetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetRequest, directdownloadkey_),
  };
  GetAssetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAssetRequest_descriptor_,
      GetAssetRequest::default_instance_,
      GetAssetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAssetRequest));
  GetImageResponse_descriptor_ = file->message_type(14);
  static const int GetImageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageResponse, imagedata_),
  };
  GetImageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetImageResponse_descriptor_,
      GetImageResponse::default_instance_,
      GetImageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetImageResponse));
  GetAssetResponse_descriptor_ = file->message_type(15);
  static const int GetAssetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse, installasset_),
  };
  GetAssetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAssetResponse_descriptor_,
      GetAssetResponse::default_instance_,
      GetAssetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAssetResponse));
  GetAssetResponse_InstallAsset_descriptor_ = GetAssetResponse_descriptor_->nested_type(0);
  static const int GetAssetResponse_InstallAsset_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, assetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, assetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, assettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, assetpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, bloburl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, assetsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, assetsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, refundtimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, forwardlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, secured_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, versioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, downloadauthcookiename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, downloadauthcookievalue_),
  };
  GetAssetResponse_InstallAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAssetResponse_InstallAsset_descriptor_,
      GetAssetResponse_InstallAsset::default_instance_,
      GetAssetResponse_InstallAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAssetResponse_InstallAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAssetResponse_InstallAsset));
  Request_descriptor_ = file->message_type(16);
  static const int Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, requestgroup_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_RequestGroup_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_RequestGroup_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestGroup, appsrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestGroup, commentsrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestGroup, getassetrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestGroup, imagerequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestGroup, subcategoriesrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestGroup, categoriesrequest_),
  };
  Request_RequestGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_RequestGroup_descriptor_,
      Request_RequestGroup::default_instance_,
      Request_RequestGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_RequestGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_RequestGroup));
  ResponseContext_descriptor_ = file->message_type(17);
  static const int ResponseContext_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, maxage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, etag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, serverversion_),
  };
  ResponseContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseContext_descriptor_,
      ResponseContext::default_instance_,
      ResponseContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseContext));
  ResponseContext_ResultType_descriptor_ = ResponseContext_descriptor_->enum_type(0);
  Response_descriptor_ = file->message_type(18);
  static const int Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, responsegroup_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_ResponseGroup_descriptor_ = Response_descriptor_->nested_type(0);
  static const int Response_ResponseGroup_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGroup, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGroup, appsresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGroup, commentsresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGroup, getassetresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGroup, imageresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGroup, categoriesresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGroup, subcategoriesresponse_),
  };
  Response_ResponseGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_ResponseGroup_descriptor_,
      Response_ResponseGroup::default_instance_,
      Response_ResponseGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ResponseGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_ResponseGroup));
  AppType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_market_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppsRequest_descriptor_, &AppsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppsResponse_descriptor_, &AppsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Category_descriptor_, &Category::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommentsRequest_descriptor_, &CommentsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommentsResponse_descriptor_, &CommentsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    App_descriptor_, &App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    App_ExtendedInfo_descriptor_, &App_ExtendedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Comment_descriptor_, &Comment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CategoriesRequest_descriptor_, &CategoriesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CategoriesResponse_descriptor_, &CategoriesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubCategoriesRequest_descriptor_, &SubCategoriesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubCategoriesResponse_descriptor_, &SubCategoriesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestContext_descriptor_, &RequestContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetImageRequest_descriptor_, &GetImageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAssetRequest_descriptor_, &GetAssetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetImageResponse_descriptor_, &GetImageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAssetResponse_descriptor_, &GetAssetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAssetResponse_InstallAsset_descriptor_, &GetAssetResponse_InstallAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_RequestGroup_descriptor_, &Request_RequestGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseContext_descriptor_, &ResponseContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_ResponseGroup_descriptor_, &Response_ResponseGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_market_2eproto() {
  delete AppsRequest::default_instance_;
  delete AppsRequest_reflection_;
  delete AppsResponse::default_instance_;
  delete AppsResponse_reflection_;
  delete Category::default_instance_;
  delete Category_reflection_;
  delete CommentsRequest::default_instance_;
  delete CommentsRequest_reflection_;
  delete CommentsResponse::default_instance_;
  delete CommentsResponse_reflection_;
  delete App::default_instance_;
  delete App_reflection_;
  delete App_ExtendedInfo::default_instance_;
  delete App_ExtendedInfo_reflection_;
  delete Comment::default_instance_;
  delete Comment_reflection_;
  delete CategoriesRequest::default_instance_;
  delete CategoriesRequest_reflection_;
  delete CategoriesResponse::default_instance_;
  delete CategoriesResponse_reflection_;
  delete SubCategoriesRequest::default_instance_;
  delete SubCategoriesRequest_reflection_;
  delete SubCategoriesResponse::default_instance_;
  delete SubCategoriesResponse_reflection_;
  delete RequestContext::default_instance_;
  delete RequestContext_reflection_;
  delete GetImageRequest::default_instance_;
  delete GetImageRequest_reflection_;
  delete GetAssetRequest::default_instance_;
  delete GetAssetRequest_reflection_;
  delete GetImageResponse::default_instance_;
  delete GetImageResponse_reflection_;
  delete GetAssetResponse::default_instance_;
  delete GetAssetResponse_reflection_;
  delete GetAssetResponse_InstallAsset::default_instance_;
  delete GetAssetResponse_InstallAsset_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Request_RequestGroup::default_instance_;
  delete Request_RequestGroup_reflection_;
  delete ResponseContext::default_instance_;
  delete ResponseContext_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Response_ResponseGroup::default_instance_;
  delete Response_ResponseGroup_reflection_;
}

void protobuf_AddDesc_market_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014market.proto\"\344\002\n\013AppsRequest\022\031\n\007appTyp"
    "e\030\001 \001(\0162\010.AppType\022\r\n\005query\030\002 \001(\t\022\022\n\ncate"
    "goryId\030\003 \001(\t\022\r\n\005appId\030\004 \001(\t\022\030\n\020withExten"
    "dedInfo\030\006 \001(\010\022/\n\torderType\030\007 \001(\0162\026.AppsR"
    "equest.OrderType:\004NONE\022\022\n\nstartIndex\030\010 \001"
    "(\004\022\024\n\014entriesCount\030\t \001(\005\022,\n\010viewType\030\n \001"
    "(\0162\025.AppsRequest.ViewType:\003ALL\"<\n\tOrderT"
    "ype\022\010\n\004NONE\020\000\022\013\n\007POPULAR\020\001\022\n\n\006NEWEST\020\002\022\014"
    "\n\010FEATURED\020\003\"\'\n\010ViewType\022\007\n\003ALL\020\000\022\010\n\004FRE"
    "E\020\001\022\010\n\004PAID\020\002\"7\n\014AppsResponse\022\021\n\003app\030\001 \003"
    "(\0132\004.App\022\024\n\014entriesCount\030\002 \001(\005\"r\n\010Catego"
    "ry\022\017\n\007appType\030\002 \001(\005\022\r\n\005title\030\004 \001(\t\022\022\n\nca"
    "tegoryId\030\003 \001(\t\022\020\n\010subtitle\030\005 \001(\t\022 \n\rsubC"
    "ategories\030\010 \003(\0132\t.Category\"J\n\017CommentsRe"
    "quest\022\r\n\005appId\030\001 \001(\t\022\022\n\nstartIndex\030\002 \001(\005"
    "\022\024\n\014entriesCount\030\003 \001(\005\"D\n\020CommentsRespon"
    "se\022\032\n\010comments\030\001 \003(\0132\010.Comment\022\024\n\014entrie"
    "sCount\030\002 \001(\005\"\370\004\n\003App\022\n\n\002id\030\001 \001(\t\022\r\n\005titl"
    "e\030\002 \001(\t\022\037\n\007appType\030\003 \001(\0162\010.AppType:\004NONE"
    "\022\017\n\007creator\030\004 \001(\t\022\017\n\007version\030\005 \001(\t\022\r\n\005pr"
    "ice\030\006 \001(\t\022\016\n\006rating\030\007 \001(\t\022\024\n\014ratingsCoun"
    "t\030\010 \001(\005\022\'\n\014extendedinfo\030\014 \001(\n2\021.App.Exte"
    "ndedInfo\022\021\n\tcreatorId\030\026 \001(\t\022\023\n\013packageNa"
    "me\030\030 \001(\t\022\023\n\013versionCode\030\031 \001(\005\022\025\n\rpriceCu"
    "rrency\030  \001(\t\022\023\n\013priceMicros\030! \001(\005\032\313\002\n\014Ex"
    "tendedInfo\022\023\n\013description\030\r \001(\t\022\026\n\016downl"
    "oadsCount\030\016 \001(\005\022\024\n\014permissionId\030\017 \003(\t\022\023\n"
    "\013installSize\030\020 \001(\005\022\023\n\013packageName\030\021 \001(\t\022"
    "\020\n\010category\030\022 \001(\t\022\024\n\014contactEmail\030\024 \001(\t\022"
    "\032\n\022downloadsCountText\030\027 \001(\t\022\024\n\014contactPh"
    "one\030\032 \001(\t\022\026\n\016contactWebsite\030\033 \001(\t\022\030\n\020scr"
    "eenshotsCount\030\036 \001(\005\022\021\n\tpromoText\030\037 \001(\t\022\025"
    "\n\rrecentChanges\030& \001(\t\022\030\n\020promotionalVide"
    "o\030+ \001(\t\"c\n\007Comment\022\014\n\004text\030\001 \001(\t\022\016\n\006rati"
    "ng\030\002 \001(\005\022\022\n\nauthorName\030\003 \001(\t\022\024\n\014creation"
    "Time\030\004 \001(\004\022\020\n\010authorId\030\005 \001(\t\"\023\n\021Categori"
    "esRequest\"3\n\022CategoriesResponse\022\035\n\ncateg"
    "ories\030\001 \003(\0132\t.Category\"1\n\024SubCategoriesR"
    "equest\022\031\n\007appType\030\001 \001(\0162\010.AppType\"g\n\025Sub"
    "CategoriesResponse\022\033\n\010category\030\001 \003(\0132\t.C"
    "ategory\022\032\n\022subCategoryDisplay\030\002 \001(\t\022\025\n\rs"
    "ubCategoryId\030\003 \001(\005\"\212\002\n\016RequestContext\022\024\n"
    "\014authSubToken\030\001 \002(\t\022\020\n\010isSecure\030\002 \002(\010\022\017\n"
    "\007version\030\003 \002(\005\022\021\n\tandroidId\030\004 \002(\t\022\033\n\023dev"
    "iceAndSdkVersion\030\005 \001(\t\022\024\n\014userLanguage\030\006"
    " \001(\t\022\023\n\013userCountry\030\007 \001(\t\022\025\n\roperatorAlp"
    "ha\030\010 \001(\t\022\030\n\020simOperatorAlpha\030\t \001(\t\022\027\n\017op"
    "eratorNumeric\030\n \001(\t\022\032\n\022simOperatorNumeri"
    "c\030\013 \001(\t\"\314\001\n\017GetImageRequest\022\r\n\005appId\030\001 \001"
    "(\t\0222\n\nimageUsage\030\003 \001(\0162\036.GetImageRequest"
    ".AppImageUsage\022\017\n\007imageId\030\004 \001(\t\"e\n\rAppIm"
    "ageUsage\022\010\n\004ICON\020\000\022\016\n\nSCREENSHOT\020\001\022\030\n\024SC"
    "REENSHOT_THUMBNAIL\020\002\022\017\n\013PROMO_BADGE\020\003\022\017\n"
    "\013BILING_ICON\020\004\"=\n\017GetAssetRequest\022\017\n\007ass"
    "etId\030\001 \002(\t\022\031\n\021directDownloadKey\030\002 \001(\t\"%\n"
    "\020GetImageResponse\022\021\n\timageData\030\001 \001(\014\"\367\002\n"
    "\020GetAssetResponse\0224\n\014installasset\030\001 \003(\n2"
    "\036.GetAssetResponse.InstallAsset\032\254\002\n\014Inst"
    "allAsset\022\017\n\007assetId\030\002 \001(\t\022\021\n\tassetName\030\003"
    " \001(\t\022\021\n\tassetType\030\004 \001(\t\022\024\n\014assetPackage\030"
    "\005 \001(\t\022\017\n\007blobUrl\030\006 \001(\t\022\026\n\016assetSignature"
    "\030\007 \001(\t\022\021\n\tassetSize\030\010 \001(\004\022\025\n\rrefundTimeo"
    "ut\030\t \001(\004\022\025\n\rforwardLocked\030\n \001(\010\022\017\n\007secur"
    "ed\030\013 \001(\010\022\023\n\013versionCode\030\014 \001(\005\022\036\n\026downloa"
    "dAuthCookieName\030\r \001(\t\022\037\n\027downloadAuthCoo"
    "kieValue\030\016 \001(\t\"\356\002\n\007Request\022 \n\007context\030\001 "
    "\001(\0132\017.RequestContext\022+\n\014requestgroup\030\002 \003"
    "(\n2\025.Request.RequestGroup\032\223\002\n\014RequestGro"
    "up\022!\n\013appsRequest\030\004 \001(\0132\014.AppsRequest\022)\n"
    "\017commentsRequest\030\005 \001(\0132\020.CommentsRequest"
    "\022)\n\017getAssetRequest\030\n \001(\0132\020.GetAssetRequ"
    "est\022&\n\014imageRequest\030\013 \001(\0132\020.GetImageRequ"
    "est\0223\n\024subCategoriesRequest\030\016 \001(\0132\025.SubC"
    "ategoriesRequest\022-\n\021categoriesRequest\030\025 "
    "\001(\0132\022.CategoriesRequest\"\336\001\n\017ResponseCont"
    "ext\022+\n\006result\030\001 \001(\0162\033.ResponseContext.Re"
    "sultType\022\016\n\006maxAge\030\002 \001(\005\022\014\n\004etag\030\003 \001(\t\022\025"
    "\n\rserverVersion\030\004 \001(\005\"i\n\nResultType\022\006\n\002O"
    "K\020\000\022\017\n\013BAD_REQUEST\020\001\022\032\n\026INTERNAL_SERVICE"
    "_ERROR\020\002\022\020\n\014NOT_MODIFIED\020\003\022\024\n\020USER_INPUT"
    "_ERROR\020\004\"\200\003\n\010Response\022.\n\rresponsegroup\030\001"
    " \003(\n2\027.Response.ResponseGroup\032\303\002\n\rRespon"
    "seGroup\022!\n\007context\030\002 \001(\0132\020.ResponseConte"
    "xt\022#\n\014appsResponse\030\003 \001(\0132\r.AppsResponse\022"
    "+\n\020commentsResponse\030\004 \001(\0132\021.CommentsResp"
    "onse\022+\n\020getAssetResponse\030\t \001(\0132\021.GetAsse"
    "tResponse\022(\n\rimageResponse\030\n \001(\0132\021.GetIm"
    "ageResponse\022/\n\022categoriesResponse\030\024 \001(\0132"
    "\023.CategoriesResponse\0225\n\025subCategoriesRes"
    "ponse\030\r \001(\0132\026.SubCategoriesResponse*K\n\007A"
    "ppType\022\010\n\004NONE\020\000\022\017\n\013APPLICATION\020\001\022\014\n\010RIN"
    "GTONE\020\002\022\r\n\tWALLPAPER\020\003\022\010\n\004GAME\020\004B!\n\037com."
    "gc.android.market.api.model", 3707);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "market.proto", &protobuf_RegisterTypes);
  AppsRequest::default_instance_ = new AppsRequest();
  AppsResponse::default_instance_ = new AppsResponse();
  Category::default_instance_ = new Category();
  CommentsRequest::default_instance_ = new CommentsRequest();
  CommentsResponse::default_instance_ = new CommentsResponse();
  App::default_instance_ = new App();
  App_ExtendedInfo::default_instance_ = new App_ExtendedInfo();
  Comment::default_instance_ = new Comment();
  CategoriesRequest::default_instance_ = new CategoriesRequest();
  CategoriesResponse::default_instance_ = new CategoriesResponse();
  SubCategoriesRequest::default_instance_ = new SubCategoriesRequest();
  SubCategoriesResponse::default_instance_ = new SubCategoriesResponse();
  RequestContext::default_instance_ = new RequestContext();
  GetImageRequest::default_instance_ = new GetImageRequest();
  GetAssetRequest::default_instance_ = new GetAssetRequest();
  GetImageResponse::default_instance_ = new GetImageResponse();
  GetAssetResponse::default_instance_ = new GetAssetResponse();
  GetAssetResponse_InstallAsset::default_instance_ = new GetAssetResponse_InstallAsset();
  Request::default_instance_ = new Request();
  Request_RequestGroup::default_instance_ = new Request_RequestGroup();
  ResponseContext::default_instance_ = new ResponseContext();
  Response::default_instance_ = new Response();
  Response_ResponseGroup::default_instance_ = new Response_ResponseGroup();
  AppsRequest::default_instance_->InitAsDefaultInstance();
  AppsResponse::default_instance_->InitAsDefaultInstance();
  Category::default_instance_->InitAsDefaultInstance();
  CommentsRequest::default_instance_->InitAsDefaultInstance();
  CommentsResponse::default_instance_->InitAsDefaultInstance();
  App::default_instance_->InitAsDefaultInstance();
  App_ExtendedInfo::default_instance_->InitAsDefaultInstance();
  Comment::default_instance_->InitAsDefaultInstance();
  CategoriesRequest::default_instance_->InitAsDefaultInstance();
  CategoriesResponse::default_instance_->InitAsDefaultInstance();
  SubCategoriesRequest::default_instance_->InitAsDefaultInstance();
  SubCategoriesResponse::default_instance_->InitAsDefaultInstance();
  RequestContext::default_instance_->InitAsDefaultInstance();
  GetImageRequest::default_instance_->InitAsDefaultInstance();
  GetAssetRequest::default_instance_->InitAsDefaultInstance();
  GetImageResponse::default_instance_->InitAsDefaultInstance();
  GetAssetResponse::default_instance_->InitAsDefaultInstance();
  GetAssetResponse_InstallAsset::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Request_RequestGroup::default_instance_->InitAsDefaultInstance();
  ResponseContext::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Response_ResponseGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_market_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_market_2eproto {
  StaticDescriptorInitializer_market_2eproto() {
    protobuf_AddDesc_market_2eproto();
  }
} static_descriptor_initializer_market_2eproto_;

const ::google::protobuf::EnumDescriptor* AppType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppType_descriptor_;
}
bool AppType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AppsRequest_OrderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppsRequest_OrderType_descriptor_;
}
bool AppsRequest_OrderType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AppsRequest_OrderType AppsRequest::NONE;
const AppsRequest_OrderType AppsRequest::POPULAR;
const AppsRequest_OrderType AppsRequest::NEWEST;
const AppsRequest_OrderType AppsRequest::FEATURED;
const AppsRequest_OrderType AppsRequest::OrderType_MIN;
const AppsRequest_OrderType AppsRequest::OrderType_MAX;
const int AppsRequest::OrderType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* AppsRequest_ViewType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppsRequest_ViewType_descriptor_;
}
bool AppsRequest_ViewType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AppsRequest_ViewType AppsRequest::ALL;
const AppsRequest_ViewType AppsRequest::FREE;
const AppsRequest_ViewType AppsRequest::PAID;
const AppsRequest_ViewType AppsRequest::ViewType_MIN;
const AppsRequest_ViewType AppsRequest::ViewType_MAX;
const int AppsRequest::ViewType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AppsRequest::kAppTypeFieldNumber;
const int AppsRequest::kQueryFieldNumber;
const int AppsRequest::kCategoryIdFieldNumber;
const int AppsRequest::kAppIdFieldNumber;
const int AppsRequest::kWithExtendedInfoFieldNumber;
const int AppsRequest::kOrderTypeFieldNumber;
const int AppsRequest::kStartIndexFieldNumber;
const int AppsRequest::kEntriesCountFieldNumber;
const int AppsRequest::kViewTypeFieldNumber;
#endif  // !_MSC_VER

AppsRequest::AppsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppsRequest::InitAsDefaultInstance() {
}

AppsRequest::AppsRequest(const AppsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppsRequest::SharedCtor() {
  _cached_size_ = 0;
  apptype_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  categoryid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  withextendedinfo_ = false;
  ordertype_ = 0;
  startindex_ = GOOGLE_ULONGLONG(0);
  entriescount_ = 0;
  viewtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppsRequest::~AppsRequest() {
  SharedDtor();
}

void AppsRequest::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (categoryid_ != &::google::protobuf::internal::kEmptyString) {
    delete categoryid_;
  }
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void AppsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppsRequest_descriptor_;
}

const AppsRequest& AppsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

AppsRequest* AppsRequest::default_instance_ = NULL;

AppsRequest* AppsRequest::New() const {
  return new AppsRequest;
}

void AppsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apptype_ = 0;
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    if (has_categoryid()) {
      if (categoryid_ != &::google::protobuf::internal::kEmptyString) {
        categoryid_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    withextendedinfo_ = false;
    ordertype_ = 0;
    startindex_ = GOOGLE_ULONGLONG(0);
    entriescount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    viewtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AppType appType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (AppType_IsValid(value)) {
            set_apptype(static_cast< AppType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query;
        break;
      }
      
      // optional string query = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_categoryId;
        break;
      }
      
      // optional string categoryId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categoryId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_categoryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->categoryid().data(), this->categoryid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_appId;
        break;
      }
      
      // optional string appId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_withExtendedInfo;
        break;
      }
      
      // optional bool withExtendedInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_withExtendedInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &withextendedinfo_)));
          set_has_withextendedinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_orderType;
        break;
      }
      
      // optional .AppsRequest.OrderType orderType = 7 [default = NONE];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AppsRequest_OrderType_IsValid(value)) {
            set_ordertype(static_cast< ::AppsRequest_OrderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_startIndex;
        break;
      }
      
      // optional uint64 startIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startindex_)));
          set_has_startindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_entriesCount;
        break;
      }
      
      // optional int32 entriesCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entriesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entriescount_)));
          set_has_entriescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_viewType;
        break;
      }
      
      // optional .AppsRequest.ViewType viewType = 10 [default = ALL];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AppsRequest_ViewType_IsValid(value)) {
            set_viewtype(static_cast< ::AppsRequest_ViewType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AppType appType = 1;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->apptype(), output);
  }
  
  // optional string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->query(), output);
  }
  
  // optional string categoryId = 3;
  if (has_categoryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->categoryid().data(), this->categoryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->categoryid(), output);
  }
  
  // optional string appId = 4;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->appid(), output);
  }
  
  // optional bool withExtendedInfo = 6;
  if (has_withextendedinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->withextendedinfo(), output);
  }
  
  // optional .AppsRequest.OrderType orderType = 7 [default = NONE];
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->ordertype(), output);
  }
  
  // optional uint64 startIndex = 8;
  if (has_startindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->startindex(), output);
  }
  
  // optional int32 entriesCount = 9;
  if (has_entriescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->entriescount(), output);
  }
  
  // optional .AppsRequest.ViewType viewType = 10 [default = ALL];
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->viewtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AppType appType = 1;
  if (has_apptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->apptype(), target);
  }
  
  // optional string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }
  
  // optional string categoryId = 3;
  if (has_categoryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->categoryid().data(), this->categoryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->categoryid(), target);
  }
  
  // optional string appId = 4;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->appid(), target);
  }
  
  // optional bool withExtendedInfo = 6;
  if (has_withextendedinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->withextendedinfo(), target);
  }
  
  // optional .AppsRequest.OrderType orderType = 7 [default = NONE];
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->ordertype(), target);
  }
  
  // optional uint64 startIndex = 8;
  if (has_startindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->startindex(), target);
  }
  
  // optional int32 entriesCount = 9;
  if (has_entriescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->entriescount(), target);
  }
  
  // optional .AppsRequest.ViewType viewType = 10 [default = ALL];
  if (has_viewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->viewtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AppType appType = 1;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apptype());
    }
    
    // optional string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }
    
    // optional string categoryId = 3;
    if (has_categoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->categoryid());
    }
    
    // optional string appId = 4;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }
    
    // optional bool withExtendedInfo = 6;
    if (has_withextendedinfo()) {
      total_size += 1 + 1;
    }
    
    // optional .AppsRequest.OrderType orderType = 7 [default = NONE];
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }
    
    // optional uint64 startIndex = 8;
    if (has_startindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startindex());
    }
    
    // optional int32 entriesCount = 9;
    if (has_entriescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entriescount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .AppsRequest.ViewType viewType = 10 [default = ALL];
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->viewtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppsRequest::MergeFrom(const AppsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_categoryid()) {
      set_categoryid(from.categoryid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_withextendedinfo()) {
      set_withextendedinfo(from.withextendedinfo());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_startindex()) {
      set_startindex(from.startindex());
    }
    if (from.has_entriescount()) {
      set_entriescount(from.entriescount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppsRequest::CopyFrom(const AppsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppsRequest::IsInitialized() const {
  
  return true;
}

void AppsRequest::Swap(AppsRequest* other) {
  if (other != this) {
    std::swap(apptype_, other->apptype_);
    std::swap(query_, other->query_);
    std::swap(categoryid_, other->categoryid_);
    std::swap(appid_, other->appid_);
    std::swap(withextendedinfo_, other->withextendedinfo_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(startindex_, other->startindex_);
    std::swap(entriescount_, other->entriescount_);
    std::swap(viewtype_, other->viewtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppsRequest_descriptor_;
  metadata.reflection = AppsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppsResponse::kAppFieldNumber;
const int AppsResponse::kEntriesCountFieldNumber;
#endif  // !_MSC_VER

AppsResponse::AppsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppsResponse::InitAsDefaultInstance() {
}

AppsResponse::AppsResponse(const AppsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppsResponse::SharedCtor() {
  _cached_size_ = 0;
  entriescount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppsResponse::~AppsResponse() {
  SharedDtor();
}

void AppsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppsResponse_descriptor_;
}

const AppsResponse& AppsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

AppsResponse* AppsResponse::default_instance_ = NULL;

AppsResponse* AppsResponse::New() const {
  return new AppsResponse;
}

void AppsResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    entriescount_ = 0;
  }
  app_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .App app = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_app;
        if (input->ExpectTag(16)) goto parse_entriesCount;
        break;
      }
      
      // optional int32 entriesCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entriesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entriescount_)));
          set_has_entriescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .App app = 1;
  for (int i = 0; i < this->app_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->app(i), output);
  }
  
  // optional int32 entriesCount = 2;
  if (has_entriescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entriescount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .App app = 1;
  for (int i = 0; i < this->app_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->app(i), target);
  }
  
  // optional int32 entriesCount = 2;
  if (has_entriescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entriescount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 entriesCount = 2;
    if (has_entriescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entriescount());
    }
    
  }
  // repeated .App app = 1;
  total_size += 1 * this->app_size();
  for (int i = 0; i < this->app_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppsResponse::MergeFrom(const AppsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  app_.MergeFrom(from.app_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_entriescount()) {
      set_entriescount(from.entriescount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppsResponse::CopyFrom(const AppsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppsResponse::IsInitialized() const {
  
  return true;
}

void AppsResponse::Swap(AppsResponse* other) {
  if (other != this) {
    app_.Swap(&other->app_);
    std::swap(entriescount_, other->entriescount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppsResponse_descriptor_;
  metadata.reflection = AppsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Category::kAppTypeFieldNumber;
const int Category::kTitleFieldNumber;
const int Category::kCategoryIdFieldNumber;
const int Category::kSubtitleFieldNumber;
const int Category::kSubCategoriesFieldNumber;
#endif  // !_MSC_VER

Category::Category()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Category::InitAsDefaultInstance() {
}

Category::Category(const Category& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Category::SharedCtor() {
  _cached_size_ = 0;
  apptype_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  categoryid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Category::~Category() {
  SharedDtor();
}

void Category::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (categoryid_ != &::google::protobuf::internal::kEmptyString) {
    delete categoryid_;
  }
  if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete subtitle_;
  }
  if (this != default_instance_) {
  }
}

void Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Category::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Category_descriptor_;
}

const Category& Category::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

Category* Category::default_instance_ = NULL;

Category* Category::New() const {
  return new Category;
}

void Category::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apptype_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_categoryid()) {
      if (categoryid_ != &::google::protobuf::internal::kEmptyString) {
        categoryid_->clear();
      }
    }
    if (has_subtitle()) {
      if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
        subtitle_->clear();
      }
    }
  }
  subcategories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apptype_)));
          set_has_apptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_categoryId;
        break;
      }
      
      // optional string categoryId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categoryId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_categoryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->categoryid().data(), this->categoryid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }
      
      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subtitle;
        break;
      }
      
      // optional string subtitle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtitle().data(), this->subtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_subCategories;
        break;
      }
      
      // repeated .Category subCategories = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subCategories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subcategories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_subCategories;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 appType = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->apptype(), output);
  }
  
  // optional string categoryId = 3;
  if (has_categoryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->categoryid().data(), this->categoryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->categoryid(), output);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }
  
  // optional string subtitle = 5;
  if (has_subtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtitle().data(), this->subtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->subtitle(), output);
  }
  
  // repeated .Category subCategories = 8;
  for (int i = 0; i < this->subcategories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->subcategories(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Category::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 appType = 2;
  if (has_apptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->apptype(), target);
  }
  
  // optional string categoryId = 3;
  if (has_categoryid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->categoryid().data(), this->categoryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->categoryid(), target);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }
  
  // optional string subtitle = 5;
  if (has_subtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtitle().data(), this->subtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subtitle(), target);
  }
  
  // repeated .Category subCategories = 8;
  for (int i = 0; i < this->subcategories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->subcategories(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Category::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 appType = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apptype());
    }
    
    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string categoryId = 3;
    if (has_categoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->categoryid());
    }
    
    // optional string subtitle = 5;
    if (has_subtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtitle());
    }
    
  }
  // repeated .Category subCategories = 8;
  total_size += 1 * this->subcategories_size();
  for (int i = 0; i < this->subcategories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subcategories(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Category::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Category* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Category*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
  GOOGLE_CHECK_NE(&from, this);
  subcategories_.MergeFrom(from.subcategories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_categoryid()) {
      set_categoryid(from.categoryid());
    }
    if (from.has_subtitle()) {
      set_subtitle(from.subtitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Category::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  
  return true;
}

void Category::Swap(Category* other) {
  if (other != this) {
    std::swap(apptype_, other->apptype_);
    std::swap(title_, other->title_);
    std::swap(categoryid_, other->categoryid_);
    std::swap(subtitle_, other->subtitle_);
    subcategories_.Swap(&other->subcategories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Category::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Category_descriptor_;
  metadata.reflection = Category_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommentsRequest::kAppIdFieldNumber;
const int CommentsRequest::kStartIndexFieldNumber;
const int CommentsRequest::kEntriesCountFieldNumber;
#endif  // !_MSC_VER

CommentsRequest::CommentsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommentsRequest::InitAsDefaultInstance() {
}

CommentsRequest::CommentsRequest(const CommentsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommentsRequest::SharedCtor() {
  _cached_size_ = 0;
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startindex_ = 0;
  entriescount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentsRequest::~CommentsRequest() {
  SharedDtor();
}

void CommentsRequest::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (this != default_instance_) {
  }
}

void CommentsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommentsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentsRequest_descriptor_;
}

const CommentsRequest& CommentsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

CommentsRequest* CommentsRequest::default_instance_ = NULL;

CommentsRequest* CommentsRequest::New() const {
  return new CommentsRequest;
}

void CommentsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    startindex_ = 0;
    entriescount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommentsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startIndex;
        break;
      }
      
      // optional int32 startIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startindex_)));
          set_has_startindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_entriesCount;
        break;
      }
      
      // optional int32 entriesCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entriesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entriescount_)));
          set_has_entriescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommentsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appid(), output);
  }
  
  // optional int32 startIndex = 2;
  if (has_startindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startindex(), output);
  }
  
  // optional int32 entriesCount = 3;
  if (has_entriescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entriescount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommentsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appid(), target);
  }
  
  // optional int32 startIndex = 2;
  if (has_startindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startindex(), target);
  }
  
  // optional int32 entriesCount = 3;
  if (has_entriescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entriescount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommentsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }
    
    // optional int32 startIndex = 2;
    if (has_startindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startindex());
    }
    
    // optional int32 entriesCount = 3;
    if (has_entriescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entriescount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommentsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommentsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommentsRequest::MergeFrom(const CommentsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_startindex()) {
      set_startindex(from.startindex());
    }
    if (from.has_entriescount()) {
      set_entriescount(from.entriescount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommentsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentsRequest::CopyFrom(const CommentsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentsRequest::IsInitialized() const {
  
  return true;
}

void CommentsRequest::Swap(CommentsRequest* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(startindex_, other->startindex_);
    std::swap(entriescount_, other->entriescount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommentsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommentsRequest_descriptor_;
  metadata.reflection = CommentsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommentsResponse::kCommentsFieldNumber;
const int CommentsResponse::kEntriesCountFieldNumber;
#endif  // !_MSC_VER

CommentsResponse::CommentsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommentsResponse::InitAsDefaultInstance() {
}

CommentsResponse::CommentsResponse(const CommentsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommentsResponse::SharedCtor() {
  _cached_size_ = 0;
  entriescount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentsResponse::~CommentsResponse() {
  SharedDtor();
}

void CommentsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommentsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommentsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentsResponse_descriptor_;
}

const CommentsResponse& CommentsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

CommentsResponse* CommentsResponse::default_instance_ = NULL;

CommentsResponse* CommentsResponse::New() const {
  return new CommentsResponse;
}

void CommentsResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    entriescount_ = 0;
  }
  comments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommentsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Comment comments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_comments;
        if (input->ExpectTag(16)) goto parse_entriesCount;
        break;
      }
      
      // optional int32 entriesCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entriesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entriescount_)));
          set_has_entriescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommentsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Comment comments = 1;
  for (int i = 0; i < this->comments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comments(i), output);
  }
  
  // optional int32 entriesCount = 2;
  if (has_entriescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entriescount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommentsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Comment comments = 1;
  for (int i = 0; i < this->comments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comments(i), target);
  }
  
  // optional int32 entriesCount = 2;
  if (has_entriescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entriescount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommentsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 entriesCount = 2;
    if (has_entriescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entriescount());
    }
    
  }
  // repeated .Comment comments = 1;
  total_size += 1 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommentsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommentsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommentsResponse::MergeFrom(const CommentsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  comments_.MergeFrom(from.comments_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_entriescount()) {
      set_entriescount(from.entriescount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommentsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentsResponse::CopyFrom(const CommentsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentsResponse::IsInitialized() const {
  
  return true;
}

void CommentsResponse::Swap(CommentsResponse* other) {
  if (other != this) {
    comments_.Swap(&other->comments_);
    std::swap(entriescount_, other->entriescount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommentsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommentsResponse_descriptor_;
  metadata.reflection = CommentsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int App_ExtendedInfo::kDescriptionFieldNumber;
const int App_ExtendedInfo::kDownloadsCountFieldNumber;
const int App_ExtendedInfo::kPermissionIdFieldNumber;
const int App_ExtendedInfo::kInstallSizeFieldNumber;
const int App_ExtendedInfo::kPackageNameFieldNumber;
const int App_ExtendedInfo::kCategoryFieldNumber;
const int App_ExtendedInfo::kContactEmailFieldNumber;
const int App_ExtendedInfo::kDownloadsCountTextFieldNumber;
const int App_ExtendedInfo::kContactPhoneFieldNumber;
const int App_ExtendedInfo::kContactWebsiteFieldNumber;
const int App_ExtendedInfo::kScreenshotsCountFieldNumber;
const int App_ExtendedInfo::kPromoTextFieldNumber;
const int App_ExtendedInfo::kRecentChangesFieldNumber;
const int App_ExtendedInfo::kPromotionalVideoFieldNumber;
#endif  // !_MSC_VER

App_ExtendedInfo::App_ExtendedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void App_ExtendedInfo::InitAsDefaultInstance() {
}

App_ExtendedInfo::App_ExtendedInfo(const App_ExtendedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void App_ExtendedInfo::SharedCtor() {
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadscount_ = 0;
  installsize_ = 0;
  packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contactemail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadscounttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contactphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contactwebsite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screenshotscount_ = 0;
  promotext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recentchanges_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  promotionalvideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

App_ExtendedInfo::~App_ExtendedInfo() {
  SharedDtor();
}

void App_ExtendedInfo::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    delete packagename_;
  }
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    delete category_;
  }
  if (contactemail_ != &::google::protobuf::internal::kEmptyString) {
    delete contactemail_;
  }
  if (downloadscounttext_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadscounttext_;
  }
  if (contactphone_ != &::google::protobuf::internal::kEmptyString) {
    delete contactphone_;
  }
  if (contactwebsite_ != &::google::protobuf::internal::kEmptyString) {
    delete contactwebsite_;
  }
  if (promotext_ != &::google::protobuf::internal::kEmptyString) {
    delete promotext_;
  }
  if (recentchanges_ != &::google::protobuf::internal::kEmptyString) {
    delete recentchanges_;
  }
  if (promotionalvideo_ != &::google::protobuf::internal::kEmptyString) {
    delete promotionalvideo_;
  }
  if (this != default_instance_) {
  }
}

void App_ExtendedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* App_ExtendedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return App_ExtendedInfo_descriptor_;
}

const App_ExtendedInfo& App_ExtendedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

App_ExtendedInfo* App_ExtendedInfo::default_instance_ = NULL;

App_ExtendedInfo* App_ExtendedInfo::New() const {
  return new App_ExtendedInfo;
}

void App_ExtendedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    downloadscount_ = 0;
    installsize_ = 0;
    if (has_packagename()) {
      if (packagename_ != &::google::protobuf::internal::kEmptyString) {
        packagename_->clear();
      }
    }
    if (has_category()) {
      if (category_ != &::google::protobuf::internal::kEmptyString) {
        category_->clear();
      }
    }
    if (has_contactemail()) {
      if (contactemail_ != &::google::protobuf::internal::kEmptyString) {
        contactemail_->clear();
      }
    }
    if (has_downloadscounttext()) {
      if (downloadscounttext_ != &::google::protobuf::internal::kEmptyString) {
        downloadscounttext_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_contactphone()) {
      if (contactphone_ != &::google::protobuf::internal::kEmptyString) {
        contactphone_->clear();
      }
    }
    if (has_contactwebsite()) {
      if (contactwebsite_ != &::google::protobuf::internal::kEmptyString) {
        contactwebsite_->clear();
      }
    }
    screenshotscount_ = 0;
    if (has_promotext()) {
      if (promotext_ != &::google::protobuf::internal::kEmptyString) {
        promotext_->clear();
      }
    }
    if (has_recentchanges()) {
      if (recentchanges_ != &::google::protobuf::internal::kEmptyString) {
        recentchanges_->clear();
      }
    }
    if (has_promotionalvideo()) {
      if (promotionalvideo_ != &::google::protobuf::internal::kEmptyString) {
        promotionalvideo_->clear();
      }
    }
  }
  permissionid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool App_ExtendedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_downloadsCount;
        break;
      }
      
      // optional int32 downloadsCount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downloadsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downloadscount_)));
          set_has_downloadscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_permissionId;
        break;
      }
      
      // repeated string permissionId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_permissionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_permissionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->permissionid(0).data(), this->permissionid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_permissionId;
        if (input->ExpectTag(128)) goto parse_installSize;
        break;
      }
      
      // optional int32 installSize = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_installSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &installsize_)));
          set_has_installsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_packageName;
        break;
      }
      
      // optional string packageName = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packagename().data(), this->packagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_category;
        break;
      }
      
      // optional string category = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_contactEmail;
        break;
      }
      
      // optional string contactEmail = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contactEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contactemail().data(), this->contactemail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_downloadsCountText;
        break;
      }
      
      // optional string downloadsCountText = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downloadsCountText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadscounttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downloadscounttext().data(), this->downloadscounttext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_contactPhone;
        break;
      }
      
      // optional string contactPhone = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contactPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contactphone().data(), this->contactphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_contactWebsite;
        break;
      }
      
      // optional string contactWebsite = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contactWebsite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contactwebsite()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contactwebsite().data(), this->contactwebsite().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_screenshotsCount;
        break;
      }
      
      // optional int32 screenshotsCount = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screenshotsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenshotscount_)));
          set_has_screenshotscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_promoText;
        break;
      }
      
      // optional string promoText = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promoText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_promotext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->promotext().data(), this->promotext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_recentChanges;
        break;
      }
      
      // optional string recentChanges = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recentChanges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recentchanges()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recentchanges().data(), this->recentchanges().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_promotionalVideo;
        break;
      }
      
      // optional string promotionalVideo = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promotionalVideo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_promotionalvideo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->promotionalvideo().data(), this->promotionalvideo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void App_ExtendedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string description = 13;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->description(), output);
  }
  
  // optional int32 downloadsCount = 14;
  if (has_downloadscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->downloadscount(), output);
  }
  
  // repeated string permissionId = 15;
  for (int i = 0; i < this->permissionid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->permissionid(i).data(), this->permissionid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->permissionid(i), output);
  }
  
  // optional int32 installSize = 16;
  if (has_installsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->installsize(), output);
  }
  
  // optional string packageName = 17;
  if (has_packagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packagename().data(), this->packagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->packagename(), output);
  }
  
  // optional string category = 18;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->category(), output);
  }
  
  // optional string contactEmail = 20;
  if (has_contactemail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactemail().data(), this->contactemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->contactemail(), output);
  }
  
  // optional string downloadsCountText = 23;
  if (has_downloadscounttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadscounttext().data(), this->downloadscounttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->downloadscounttext(), output);
  }
  
  // optional string contactPhone = 26;
  if (has_contactphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactphone().data(), this->contactphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->contactphone(), output);
  }
  
  // optional string contactWebsite = 27;
  if (has_contactwebsite()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactwebsite().data(), this->contactwebsite().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->contactwebsite(), output);
  }
  
  // optional int32 screenshotsCount = 30;
  if (has_screenshotscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->screenshotscount(), output);
  }
  
  // optional string promoText = 31;
  if (has_promotext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->promotext().data(), this->promotext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->promotext(), output);
  }
  
  // optional string recentChanges = 38;
  if (has_recentchanges()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recentchanges().data(), this->recentchanges().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->recentchanges(), output);
  }
  
  // optional string promotionalVideo = 43;
  if (has_promotionalvideo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->promotionalvideo().data(), this->promotionalvideo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->promotionalvideo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* App_ExtendedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string description = 13;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->description(), target);
  }
  
  // optional int32 downloadsCount = 14;
  if (has_downloadscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->downloadscount(), target);
  }
  
  // repeated string permissionId = 15;
  for (int i = 0; i < this->permissionid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->permissionid(i).data(), this->permissionid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->permissionid(i), target);
  }
  
  // optional int32 installSize = 16;
  if (has_installsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->installsize(), target);
  }
  
  // optional string packageName = 17;
  if (has_packagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packagename().data(), this->packagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->packagename(), target);
  }
  
  // optional string category = 18;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->category(), target);
  }
  
  // optional string contactEmail = 20;
  if (has_contactemail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactemail().data(), this->contactemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->contactemail(), target);
  }
  
  // optional string downloadsCountText = 23;
  if (has_downloadscounttext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadscounttext().data(), this->downloadscounttext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->downloadscounttext(), target);
  }
  
  // optional string contactPhone = 26;
  if (has_contactphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactphone().data(), this->contactphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->contactphone(), target);
  }
  
  // optional string contactWebsite = 27;
  if (has_contactwebsite()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contactwebsite().data(), this->contactwebsite().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->contactwebsite(), target);
  }
  
  // optional int32 screenshotsCount = 30;
  if (has_screenshotscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->screenshotscount(), target);
  }
  
  // optional string promoText = 31;
  if (has_promotext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->promotext().data(), this->promotext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->promotext(), target);
  }
  
  // optional string recentChanges = 38;
  if (has_recentchanges()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recentchanges().data(), this->recentchanges().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->recentchanges(), target);
  }
  
  // optional string promotionalVideo = 43;
  if (has_promotionalvideo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->promotionalvideo().data(), this->promotionalvideo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->promotionalvideo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int App_ExtendedInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string description = 13;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional int32 downloadsCount = 14;
    if (has_downloadscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downloadscount());
    }
    
    // optional int32 installSize = 16;
    if (has_installsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->installsize());
    }
    
    // optional string packageName = 17;
    if (has_packagename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packagename());
    }
    
    // optional string category = 18;
    if (has_category()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }
    
    // optional string contactEmail = 20;
    if (has_contactemail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactemail());
    }
    
    // optional string downloadsCountText = 23;
    if (has_downloadscounttext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadscounttext());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string contactPhone = 26;
    if (has_contactphone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactphone());
    }
    
    // optional string contactWebsite = 27;
    if (has_contactwebsite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contactwebsite());
    }
    
    // optional int32 screenshotsCount = 30;
    if (has_screenshotscount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenshotscount());
    }
    
    // optional string promoText = 31;
    if (has_promotext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->promotext());
    }
    
    // optional string recentChanges = 38;
    if (has_recentchanges()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recentchanges());
    }
    
    // optional string promotionalVideo = 43;
    if (has_promotionalvideo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->promotionalvideo());
    }
    
  }
  // repeated string permissionId = 15;
  total_size += 1 * this->permissionid_size();
  for (int i = 0; i < this->permissionid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->permissionid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void App_ExtendedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const App_ExtendedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const App_ExtendedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void App_ExtendedInfo::MergeFrom(const App_ExtendedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  permissionid_.MergeFrom(from.permissionid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_downloadscount()) {
      set_downloadscount(from.downloadscount());
    }
    if (from.has_installsize()) {
      set_installsize(from.installsize());
    }
    if (from.has_packagename()) {
      set_packagename(from.packagename());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_contactemail()) {
      set_contactemail(from.contactemail());
    }
    if (from.has_downloadscounttext()) {
      set_downloadscounttext(from.downloadscounttext());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contactphone()) {
      set_contactphone(from.contactphone());
    }
    if (from.has_contactwebsite()) {
      set_contactwebsite(from.contactwebsite());
    }
    if (from.has_screenshotscount()) {
      set_screenshotscount(from.screenshotscount());
    }
    if (from.has_promotext()) {
      set_promotext(from.promotext());
    }
    if (from.has_recentchanges()) {
      set_recentchanges(from.recentchanges());
    }
    if (from.has_promotionalvideo()) {
      set_promotionalvideo(from.promotionalvideo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void App_ExtendedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App_ExtendedInfo::CopyFrom(const App_ExtendedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App_ExtendedInfo::IsInitialized() const {
  
  return true;
}

void App_ExtendedInfo::Swap(App_ExtendedInfo* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(downloadscount_, other->downloadscount_);
    permissionid_.Swap(&other->permissionid_);
    std::swap(installsize_, other->installsize_);
    std::swap(packagename_, other->packagename_);
    std::swap(category_, other->category_);
    std::swap(contactemail_, other->contactemail_);
    std::swap(downloadscounttext_, other->downloadscounttext_);
    std::swap(contactphone_, other->contactphone_);
    std::swap(contactwebsite_, other->contactwebsite_);
    std::swap(screenshotscount_, other->screenshotscount_);
    std::swap(promotext_, other->promotext_);
    std::swap(recentchanges_, other->recentchanges_);
    std::swap(promotionalvideo_, other->promotionalvideo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata App_ExtendedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = App_ExtendedInfo_descriptor_;
  metadata.reflection = App_ExtendedInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int App::kIdFieldNumber;
const int App::kTitleFieldNumber;
const int App::kAppTypeFieldNumber;
const int App::kCreatorFieldNumber;
const int App::kVersionFieldNumber;
const int App::kPriceFieldNumber;
const int App::kRatingFieldNumber;
const int App::kRatingsCountFieldNumber;
const int App::kExtendedinfoFieldNumber;
const int App::kCreatorIdFieldNumber;
const int App::kPackageNameFieldNumber;
const int App::kVersionCodeFieldNumber;
const int App::kPriceCurrencyFieldNumber;
const int App::kPriceMicrosFieldNumber;
#endif  // !_MSC_VER

App::App()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void App::InitAsDefaultInstance() {
  extendedinfo_ = const_cast< ::App_ExtendedInfo*>(&::App_ExtendedInfo::default_instance());
}

App::App(const App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void App::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = 0;
  creator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rating_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ratingscount_ = 0;
  extendedinfo_ = NULL;
  creatorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  versioncode_ = 0;
  pricecurrency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pricemicros_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

App::~App() {
  SharedDtor();
}

void App::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (creator_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (price_ != &::google::protobuf::internal::kEmptyString) {
    delete price_;
  }
  if (rating_ != &::google::protobuf::internal::kEmptyString) {
    delete rating_;
  }
  if (creatorid_ != &::google::protobuf::internal::kEmptyString) {
    delete creatorid_;
  }
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    delete packagename_;
  }
  if (pricecurrency_ != &::google::protobuf::internal::kEmptyString) {
    delete pricecurrency_;
  }
  if (this != default_instance_) {
    delete extendedinfo_;
  }
}

void App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return App_descriptor_;
}

const App& App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

App* App::default_instance_ = NULL;

App* App::New() const {
  return new App;
}

void App::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    apptype_ = 0;
    if (has_creator()) {
      if (creator_ != &::google::protobuf::internal::kEmptyString) {
        creator_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_price()) {
      if (price_ != &::google::protobuf::internal::kEmptyString) {
        price_->clear();
      }
    }
    if (has_rating()) {
      if (rating_ != &::google::protobuf::internal::kEmptyString) {
        rating_->clear();
      }
    }
    ratingscount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_extendedinfo()) {
      if (extendedinfo_ != NULL) extendedinfo_->::App_ExtendedInfo::Clear();
    }
    if (has_creatorid()) {
      if (creatorid_ != &::google::protobuf::internal::kEmptyString) {
        creatorid_->clear();
      }
    }
    if (has_packagename()) {
      if (packagename_ != &::google::protobuf::internal::kEmptyString) {
        packagename_->clear();
      }
    }
    versioncode_ = 0;
    if (has_pricecurrency()) {
      if (pricecurrency_ != &::google::protobuf::internal::kEmptyString) {
        pricecurrency_->clear();
      }
    }
    pricemicros_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appType;
        break;
      }
      
      // optional .AppType appType = 3 [default = NONE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (AppType_IsValid(value)) {
            set_apptype(static_cast< AppType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_creator;
        break;
      }
      
      // optional string creator = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator().data(), this->creator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_price;
        break;
      }
      
      // optional string price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rating;
        break;
      }
      
      // optional string rating = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rating().data(), this->rating().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ratingsCount;
        break;
      }
      
      // optional int32 ratingsCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ratingsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratingscount_)));
          set_has_ratingscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(99)) goto parse_extendedinfo;
        break;
      }
      
      // optional group ExtendedInfo = 12 {
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_extendedinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                12, input, mutable_extendedinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_creatorId;
        break;
      }
      
      // optional string creatorId = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creatorId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creatorid().data(), this->creatorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_packageName;
        break;
      }
      
      // optional string packageName = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packagename().data(), this->packagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_versionCode;
        break;
      }
      
      // optional int32 versionCode = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versionCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versioncode_)));
          set_has_versioncode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_priceCurrency;
        break;
      }
      
      // optional string priceCurrency = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_priceCurrency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricecurrency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pricecurrency().data(), this->pricecurrency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_priceMicros;
        break;
      }
      
      // optional int32 priceMicros = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceMicros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricemicros_)));
          set_has_pricemicros();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // optional .AppType appType = 3 [default = NONE];
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->apptype(), output);
  }
  
  // optional string creator = 4;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->creator(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  // optional string price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->price(), output);
  }
  
  // optional string rating = 7;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rating().data(), this->rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->rating(), output);
  }
  
  // optional int32 ratingsCount = 8;
  if (has_ratingscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ratingscount(), output);
  }
  
  // optional group ExtendedInfo = 12 {
  if (has_extendedinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      12, this->extendedinfo(), output);
  }
  
  // optional string creatorId = 22;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creatorid().data(), this->creatorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->creatorid(), output);
  }
  
  // optional string packageName = 24;
  if (has_packagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packagename().data(), this->packagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->packagename(), output);
  }
  
  // optional int32 versionCode = 25;
  if (has_versioncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->versioncode(), output);
  }
  
  // optional string priceCurrency = 32;
  if (has_pricecurrency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricecurrency().data(), this->pricecurrency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->pricecurrency(), output);
  }
  
  // optional int32 priceMicros = 33;
  if (has_pricemicros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->pricemicros(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // optional .AppType appType = 3 [default = NONE];
  if (has_apptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->apptype(), target);
  }
  
  // optional string creator = 4;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->creator(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  // optional string price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->price(), target);
  }
  
  // optional string rating = 7;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rating().data(), this->rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rating(), target);
  }
  
  // optional int32 ratingsCount = 8;
  if (has_ratingscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ratingscount(), target);
  }
  
  // optional group ExtendedInfo = 12 {
  if (has_extendedinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        12, this->extendedinfo(), target);
  }
  
  // optional string creatorId = 22;
  if (has_creatorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creatorid().data(), this->creatorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->creatorid(), target);
  }
  
  // optional string packageName = 24;
  if (has_packagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packagename().data(), this->packagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->packagename(), target);
  }
  
  // optional int32 versionCode = 25;
  if (has_versioncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->versioncode(), target);
  }
  
  // optional string priceCurrency = 32;
  if (has_pricecurrency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricecurrency().data(), this->pricecurrency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->pricecurrency(), target);
  }
  
  // optional int32 priceMicros = 33;
  if (has_pricemicros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->pricemicros(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int App::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional .AppType appType = 3 [default = NONE];
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apptype());
    }
    
    // optional string creator = 4;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator());
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional string price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }
    
    // optional string rating = 7;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rating());
    }
    
    // optional int32 ratingsCount = 8;
    if (has_ratingscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratingscount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional group ExtendedInfo = 12 {
    if (has_extendedinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->extendedinfo());
    }
    
    // optional string creatorId = 22;
    if (has_creatorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creatorid());
    }
    
    // optional string packageName = 24;
    if (has_packagename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packagename());
    }
    
    // optional int32 versionCode = 25;
    if (has_versioncode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versioncode());
    }
    
    // optional string priceCurrency = 32;
    if (has_pricecurrency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricecurrency());
    }
    
    // optional int32 priceMicros = 33;
    if (has_pricemicros()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricemicros());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void App::MergeFrom(const App& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_creator()) {
      set_creator(from.creator());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_ratingscount()) {
      set_ratingscount(from.ratingscount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extendedinfo()) {
      mutable_extendedinfo()->::App_ExtendedInfo::MergeFrom(from.extendedinfo());
    }
    if (from.has_creatorid()) {
      set_creatorid(from.creatorid());
    }
    if (from.has_packagename()) {
      set_packagename(from.packagename());
    }
    if (from.has_versioncode()) {
      set_versioncode(from.versioncode());
    }
    if (from.has_pricecurrency()) {
      set_pricecurrency(from.pricecurrency());
    }
    if (from.has_pricemicros()) {
      set_pricemicros(from.pricemicros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App::CopyFrom(const App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  
  return true;
}

void App::Swap(App* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(apptype_, other->apptype_);
    std::swap(creator_, other->creator_);
    std::swap(version_, other->version_);
    std::swap(price_, other->price_);
    std::swap(rating_, other->rating_);
    std::swap(ratingscount_, other->ratingscount_);
    std::swap(extendedinfo_, other->extendedinfo_);
    std::swap(creatorid_, other->creatorid_);
    std::swap(packagename_, other->packagename_);
    std::swap(versioncode_, other->versioncode_);
    std::swap(pricecurrency_, other->pricecurrency_);
    std::swap(pricemicros_, other->pricemicros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = App_descriptor_;
  metadata.reflection = App_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Comment::kTextFieldNumber;
const int Comment::kRatingFieldNumber;
const int Comment::kAuthorNameFieldNumber;
const int Comment::kCreationTimeFieldNumber;
const int Comment::kAuthorIdFieldNumber;
#endif  // !_MSC_VER

Comment::Comment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Comment::InitAsDefaultInstance() {
}

Comment::Comment(const Comment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Comment::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rating_ = 0;
  authorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creationtime_ = GOOGLE_ULONGLONG(0);
  authorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Comment::~Comment() {
  SharedDtor();
}

void Comment::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (authorname_ != &::google::protobuf::internal::kEmptyString) {
    delete authorname_;
  }
  if (authorid_ != &::google::protobuf::internal::kEmptyString) {
    delete authorid_;
  }
  if (this != default_instance_) {
  }
}

void Comment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Comment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Comment_descriptor_;
}

const Comment& Comment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

Comment* Comment::default_instance_ = NULL;

Comment* Comment::New() const {
  return new Comment;
}

void Comment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    rating_ = 0;
    if (has_authorname()) {
      if (authorname_ != &::google::protobuf::internal::kEmptyString) {
        authorname_->clear();
      }
    }
    creationtime_ = GOOGLE_ULONGLONG(0);
    if (has_authorid()) {
      if (authorid_ != &::google::protobuf::internal::kEmptyString) {
        authorid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Comment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rating;
        break;
      }
      
      // optional int32 rating = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_authorName;
        break;
      }
      
      // optional string authorName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorname().data(), this->authorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_creationTime;
        break;
      }
      
      // optional uint64 creationTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creationTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creationtime_)));
          set_has_creationtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_authorId;
        break;
      }
      
      // optional string authorId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorid().data(), this->authorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Comment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  // optional int32 rating = 2;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rating(), output);
  }
  
  // optional string authorName = 3;
  if (has_authorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorname().data(), this->authorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->authorname(), output);
  }
  
  // optional uint64 creationTime = 4;
  if (has_creationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->creationtime(), output);
  }
  
  // optional string authorId = 5;
  if (has_authorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorid().data(), this->authorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->authorid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Comment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }
  
  // optional int32 rating = 2;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rating(), target);
  }
  
  // optional string authorName = 3;
  if (has_authorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorname().data(), this->authorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authorname(), target);
  }
  
  // optional uint64 creationTime = 4;
  if (has_creationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->creationtime(), target);
  }
  
  // optional string authorId = 5;
  if (has_authorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorid().data(), this->authorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->authorid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Comment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional int32 rating = 2;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rating());
    }
    
    // optional string authorName = 3;
    if (has_authorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorname());
    }
    
    // optional uint64 creationTime = 4;
    if (has_creationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creationtime());
    }
    
    // optional string authorId = 5;
    if (has_authorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Comment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Comment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Comment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Comment::MergeFrom(const Comment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_authorname()) {
      set_authorname(from.authorname());
    }
    if (from.has_creationtime()) {
      set_creationtime(from.creationtime());
    }
    if (from.has_authorid()) {
      set_authorid(from.authorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Comment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Comment::CopyFrom(const Comment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comment::IsInitialized() const {
  
  return true;
}

void Comment::Swap(Comment* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(rating_, other->rating_);
    std::swap(authorname_, other->authorname_);
    std::swap(creationtime_, other->creationtime_);
    std::swap(authorid_, other->authorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Comment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Comment_descriptor_;
  metadata.reflection = Comment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CategoriesRequest::CategoriesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CategoriesRequest::InitAsDefaultInstance() {
}

CategoriesRequest::CategoriesRequest(const CategoriesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CategoriesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CategoriesRequest::~CategoriesRequest() {
  SharedDtor();
}

void CategoriesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CategoriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoriesRequest_descriptor_;
}

const CategoriesRequest& CategoriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

CategoriesRequest* CategoriesRequest::default_instance_ = NULL;

CategoriesRequest* CategoriesRequest::New() const {
  return new CategoriesRequest;
}

void CategoriesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CategoriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CategoriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CategoriesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CategoriesRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CategoriesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CategoriesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CategoriesRequest::MergeFrom(const CategoriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CategoriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoriesRequest::CopyFrom(const CategoriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoriesRequest::IsInitialized() const {
  
  return true;
}

void CategoriesRequest::Swap(CategoriesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CategoriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CategoriesRequest_descriptor_;
  metadata.reflection = CategoriesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CategoriesResponse::kCategoriesFieldNumber;
#endif  // !_MSC_VER

CategoriesResponse::CategoriesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CategoriesResponse::InitAsDefaultInstance() {
}

CategoriesResponse::CategoriesResponse(const CategoriesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CategoriesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CategoriesResponse::~CategoriesResponse() {
  SharedDtor();
}

void CategoriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CategoriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoriesResponse_descriptor_;
}

const CategoriesResponse& CategoriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

CategoriesResponse* CategoriesResponse::default_instance_ = NULL;

CategoriesResponse* CategoriesResponse::New() const {
  return new CategoriesResponse;
}

void CategoriesResponse::Clear() {
  categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CategoriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Category categories = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_categories;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CategoriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Category categories = 1;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->categories(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CategoriesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Category categories = 1;
  for (int i = 0; i < this->categories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->categories(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CategoriesResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .Category categories = 1;
  total_size += 1 * this->categories_size();
  for (int i = 0; i < this->categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->categories(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CategoriesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CategoriesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CategoriesResponse::MergeFrom(const CategoriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  categories_.MergeFrom(from.categories_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CategoriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoriesResponse::CopyFrom(const CategoriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoriesResponse::IsInitialized() const {
  
  return true;
}

void CategoriesResponse::Swap(CategoriesResponse* other) {
  if (other != this) {
    categories_.Swap(&other->categories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CategoriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CategoriesResponse_descriptor_;
  metadata.reflection = CategoriesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubCategoriesRequest::kAppTypeFieldNumber;
#endif  // !_MSC_VER

SubCategoriesRequest::SubCategoriesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubCategoriesRequest::InitAsDefaultInstance() {
}

SubCategoriesRequest::SubCategoriesRequest(const SubCategoriesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubCategoriesRequest::SharedCtor() {
  _cached_size_ = 0;
  apptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubCategoriesRequest::~SubCategoriesRequest() {
  SharedDtor();
}

void SubCategoriesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubCategoriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubCategoriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubCategoriesRequest_descriptor_;
}

const SubCategoriesRequest& SubCategoriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

SubCategoriesRequest* SubCategoriesRequest::default_instance_ = NULL;

SubCategoriesRequest* SubCategoriesRequest::New() const {
  return new SubCategoriesRequest;
}

void SubCategoriesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubCategoriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AppType appType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (AppType_IsValid(value)) {
            set_apptype(static_cast< AppType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubCategoriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AppType appType = 1;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->apptype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubCategoriesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AppType appType = 1;
  if (has_apptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->apptype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubCategoriesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AppType appType = 1;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apptype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubCategoriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubCategoriesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubCategoriesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubCategoriesRequest::MergeFrom(const SubCategoriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubCategoriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubCategoriesRequest::CopyFrom(const SubCategoriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubCategoriesRequest::IsInitialized() const {
  
  return true;
}

void SubCategoriesRequest::Swap(SubCategoriesRequest* other) {
  if (other != this) {
    std::swap(apptype_, other->apptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubCategoriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubCategoriesRequest_descriptor_;
  metadata.reflection = SubCategoriesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubCategoriesResponse::kCategoryFieldNumber;
const int SubCategoriesResponse::kSubCategoryDisplayFieldNumber;
const int SubCategoriesResponse::kSubCategoryIdFieldNumber;
#endif  // !_MSC_VER

SubCategoriesResponse::SubCategoriesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubCategoriesResponse::InitAsDefaultInstance() {
}

SubCategoriesResponse::SubCategoriesResponse(const SubCategoriesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubCategoriesResponse::SharedCtor() {
  _cached_size_ = 0;
  subcategorydisplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subcategoryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubCategoriesResponse::~SubCategoriesResponse() {
  SharedDtor();
}

void SubCategoriesResponse::SharedDtor() {
  if (subcategorydisplay_ != &::google::protobuf::internal::kEmptyString) {
    delete subcategorydisplay_;
  }
  if (this != default_instance_) {
  }
}

void SubCategoriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubCategoriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubCategoriesResponse_descriptor_;
}

const SubCategoriesResponse& SubCategoriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

SubCategoriesResponse* SubCategoriesResponse::default_instance_ = NULL;

SubCategoriesResponse* SubCategoriesResponse::New() const {
  return new SubCategoriesResponse;
}

void SubCategoriesResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_subcategorydisplay()) {
      if (subcategorydisplay_ != &::google::protobuf::internal::kEmptyString) {
        subcategorydisplay_->clear();
      }
    }
    subcategoryid_ = 0;
  }
  category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubCategoriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Category category = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_category;
        if (input->ExpectTag(18)) goto parse_subCategoryDisplay;
        break;
      }
      
      // optional string subCategoryDisplay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subCategoryDisplay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subcategorydisplay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subcategorydisplay().data(), this->subcategorydisplay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subCategoryId;
        break;
      }
      
      // optional int32 subCategoryId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subCategoryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subcategoryid_)));
          set_has_subcategoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubCategoriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Category category = 1;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->category(i), output);
  }
  
  // optional string subCategoryDisplay = 2;
  if (has_subcategorydisplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subcategorydisplay().data(), this->subcategorydisplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subcategorydisplay(), output);
  }
  
  // optional int32 subCategoryId = 3;
  if (has_subcategoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subcategoryid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubCategoriesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Category category = 1;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->category(i), target);
  }
  
  // optional string subCategoryDisplay = 2;
  if (has_subcategorydisplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subcategorydisplay().data(), this->subcategorydisplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subcategorydisplay(), target);
  }
  
  // optional int32 subCategoryId = 3;
  if (has_subcategoryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subcategoryid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubCategoriesResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string subCategoryDisplay = 2;
    if (has_subcategorydisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subcategorydisplay());
    }
    
    // optional int32 subCategoryId = 3;
    if (has_subcategoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subcategoryid());
    }
    
  }
  // repeated .Category category = 1;
  total_size += 1 * this->category_size();
  for (int i = 0; i < this->category_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubCategoriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubCategoriesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubCategoriesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubCategoriesResponse::MergeFrom(const SubCategoriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  category_.MergeFrom(from.category_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_subcategorydisplay()) {
      set_subcategorydisplay(from.subcategorydisplay());
    }
    if (from.has_subcategoryid()) {
      set_subcategoryid(from.subcategoryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubCategoriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubCategoriesResponse::CopyFrom(const SubCategoriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubCategoriesResponse::IsInitialized() const {
  
  return true;
}

void SubCategoriesResponse::Swap(SubCategoriesResponse* other) {
  if (other != this) {
    category_.Swap(&other->category_);
    std::swap(subcategorydisplay_, other->subcategorydisplay_);
    std::swap(subcategoryid_, other->subcategoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubCategoriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubCategoriesResponse_descriptor_;
  metadata.reflection = SubCategoriesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestContext::kAuthSubTokenFieldNumber;
const int RequestContext::kIsSecureFieldNumber;
const int RequestContext::kVersionFieldNumber;
const int RequestContext::kAndroidIdFieldNumber;
const int RequestContext::kDeviceAndSdkVersionFieldNumber;
const int RequestContext::kUserLanguageFieldNumber;
const int RequestContext::kUserCountryFieldNumber;
const int RequestContext::kOperatorAlphaFieldNumber;
const int RequestContext::kSimOperatorAlphaFieldNumber;
const int RequestContext::kOperatorNumericFieldNumber;
const int RequestContext::kSimOperatorNumericFieldNumber;
#endif  // !_MSC_VER

RequestContext::RequestContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestContext::InitAsDefaultInstance() {
}

RequestContext::RequestContext(const RequestContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestContext::SharedCtor() {
  _cached_size_ = 0;
  authsubtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  issecure_ = false;
  version_ = 0;
  androidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceandsdkversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userlanguage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usercountry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operatoralpha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  simoperatoralpha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operatornumeric_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  simoperatornumeric_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestContext::~RequestContext() {
  SharedDtor();
}

void RequestContext::SharedDtor() {
  if (authsubtoken_ != &::google::protobuf::internal::kEmptyString) {
    delete authsubtoken_;
  }
  if (androidid_ != &::google::protobuf::internal::kEmptyString) {
    delete androidid_;
  }
  if (deviceandsdkversion_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceandsdkversion_;
  }
  if (userlanguage_ != &::google::protobuf::internal::kEmptyString) {
    delete userlanguage_;
  }
  if (usercountry_ != &::google::protobuf::internal::kEmptyString) {
    delete usercountry_;
  }
  if (operatoralpha_ != &::google::protobuf::internal::kEmptyString) {
    delete operatoralpha_;
  }
  if (simoperatoralpha_ != &::google::protobuf::internal::kEmptyString) {
    delete simoperatoralpha_;
  }
  if (operatornumeric_ != &::google::protobuf::internal::kEmptyString) {
    delete operatornumeric_;
  }
  if (simoperatornumeric_ != &::google::protobuf::internal::kEmptyString) {
    delete simoperatornumeric_;
  }
  if (this != default_instance_) {
  }
}

void RequestContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestContext_descriptor_;
}

const RequestContext& RequestContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

RequestContext* RequestContext::default_instance_ = NULL;

RequestContext* RequestContext::New() const {
  return new RequestContext;
}

void RequestContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_authsubtoken()) {
      if (authsubtoken_ != &::google::protobuf::internal::kEmptyString) {
        authsubtoken_->clear();
      }
    }
    issecure_ = false;
    version_ = 0;
    if (has_androidid()) {
      if (androidid_ != &::google::protobuf::internal::kEmptyString) {
        androidid_->clear();
      }
    }
    if (has_deviceandsdkversion()) {
      if (deviceandsdkversion_ != &::google::protobuf::internal::kEmptyString) {
        deviceandsdkversion_->clear();
      }
    }
    if (has_userlanguage()) {
      if (userlanguage_ != &::google::protobuf::internal::kEmptyString) {
        userlanguage_->clear();
      }
    }
    if (has_usercountry()) {
      if (usercountry_ != &::google::protobuf::internal::kEmptyString) {
        usercountry_->clear();
      }
    }
    if (has_operatoralpha()) {
      if (operatoralpha_ != &::google::protobuf::internal::kEmptyString) {
        operatoralpha_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_simoperatoralpha()) {
      if (simoperatoralpha_ != &::google::protobuf::internal::kEmptyString) {
        simoperatoralpha_->clear();
      }
    }
    if (has_operatornumeric()) {
      if (operatornumeric_ != &::google::protobuf::internal::kEmptyString) {
        operatornumeric_->clear();
      }
    }
    if (has_simoperatornumeric()) {
      if (simoperatornumeric_ != &::google::protobuf::internal::kEmptyString) {
        simoperatornumeric_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string authSubToken = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authsubtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authsubtoken().data(), this->authsubtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isSecure;
        break;
      }
      
      // required bool isSecure = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSecure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issecure_)));
          set_has_issecure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }
      
      // required int32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_androidId;
        break;
      }
      
      // required string androidId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_androidId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_androidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->androidid().data(), this->androidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceAndSdkVersion;
        break;
      }
      
      // optional string deviceAndSdkVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceAndSdkVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceandsdkversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceandsdkversion().data(), this->deviceandsdkversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_userLanguage;
        break;
      }
      
      // optional string userLanguage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userLanguage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userlanguage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userlanguage().data(), this->userlanguage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_userCountry;
        break;
      }
      
      // optional string userCountry = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userCountry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usercountry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usercountry().data(), this->usercountry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_operatorAlpha;
        break;
      }
      
      // optional string operatorAlpha = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatorAlpha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operatoralpha()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operatoralpha().data(), this->operatoralpha().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_simOperatorAlpha;
        break;
      }
      
      // optional string simOperatorAlpha = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simOperatorAlpha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_simoperatoralpha()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->simoperatoralpha().data(), this->simoperatoralpha().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_operatorNumeric;
        break;
      }
      
      // optional string operatorNumeric = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatorNumeric:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operatornumeric()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operatornumeric().data(), this->operatornumeric().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_simOperatorNumeric;
        break;
      }
      
      // optional string simOperatorNumeric = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simOperatorNumeric:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_simoperatornumeric()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->simoperatornumeric().data(), this->simoperatornumeric().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string authSubToken = 1;
  if (has_authsubtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authsubtoken().data(), this->authsubtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->authsubtoken(), output);
  }
  
  // required bool isSecure = 2;
  if (has_issecure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issecure(), output);
  }
  
  // required int32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }
  
  // required string androidId = 4;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->androidid(), output);
  }
  
  // optional string deviceAndSdkVersion = 5;
  if (has_deviceandsdkversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceandsdkversion().data(), this->deviceandsdkversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->deviceandsdkversion(), output);
  }
  
  // optional string userLanguage = 6;
  if (has_userlanguage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userlanguage().data(), this->userlanguage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->userlanguage(), output);
  }
  
  // optional string userCountry = 7;
  if (has_usercountry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usercountry().data(), this->usercountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->usercountry(), output);
  }
  
  // optional string operatorAlpha = 8;
  if (has_operatoralpha()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operatoralpha().data(), this->operatoralpha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->operatoralpha(), output);
  }
  
  // optional string simOperatorAlpha = 9;
  if (has_simoperatoralpha()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->simoperatoralpha().data(), this->simoperatoralpha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->simoperatoralpha(), output);
  }
  
  // optional string operatorNumeric = 10;
  if (has_operatornumeric()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operatornumeric().data(), this->operatornumeric().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->operatornumeric(), output);
  }
  
  // optional string simOperatorNumeric = 11;
  if (has_simoperatornumeric()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->simoperatornumeric().data(), this->simoperatornumeric().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->simoperatornumeric(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string authSubToken = 1;
  if (has_authsubtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authsubtoken().data(), this->authsubtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->authsubtoken(), target);
  }
  
  // required bool isSecure = 2;
  if (has_issecure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issecure(), target);
  }
  
  // required int32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }
  
  // required string androidId = 4;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->androidid(), target);
  }
  
  // optional string deviceAndSdkVersion = 5;
  if (has_deviceandsdkversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceandsdkversion().data(), this->deviceandsdkversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deviceandsdkversion(), target);
  }
  
  // optional string userLanguage = 6;
  if (has_userlanguage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userlanguage().data(), this->userlanguage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userlanguage(), target);
  }
  
  // optional string userCountry = 7;
  if (has_usercountry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usercountry().data(), this->usercountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->usercountry(), target);
  }
  
  // optional string operatorAlpha = 8;
  if (has_operatoralpha()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operatoralpha().data(), this->operatoralpha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->operatoralpha(), target);
  }
  
  // optional string simOperatorAlpha = 9;
  if (has_simoperatoralpha()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->simoperatoralpha().data(), this->simoperatoralpha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->simoperatoralpha(), target);
  }
  
  // optional string operatorNumeric = 10;
  if (has_operatornumeric()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operatornumeric().data(), this->operatornumeric().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->operatornumeric(), target);
  }
  
  // optional string simOperatorNumeric = 11;
  if (has_simoperatornumeric()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->simoperatornumeric().data(), this->simoperatornumeric().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->simoperatornumeric(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestContext::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string authSubToken = 1;
    if (has_authsubtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authsubtoken());
    }
    
    // required bool isSecure = 2;
    if (has_issecure()) {
      total_size += 1 + 1;
    }
    
    // required int32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required string androidId = 4;
    if (has_androidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->androidid());
    }
    
    // optional string deviceAndSdkVersion = 5;
    if (has_deviceandsdkversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceandsdkversion());
    }
    
    // optional string userLanguage = 6;
    if (has_userlanguage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userlanguage());
    }
    
    // optional string userCountry = 7;
    if (has_usercountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usercountry());
    }
    
    // optional string operatorAlpha = 8;
    if (has_operatoralpha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operatoralpha());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string simOperatorAlpha = 9;
    if (has_simoperatoralpha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->simoperatoralpha());
    }
    
    // optional string operatorNumeric = 10;
    if (has_operatornumeric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operatornumeric());
    }
    
    // optional string simOperatorNumeric = 11;
    if (has_simoperatornumeric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->simoperatornumeric());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestContext::MergeFrom(const RequestContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authsubtoken()) {
      set_authsubtoken(from.authsubtoken());
    }
    if (from.has_issecure()) {
      set_issecure(from.issecure());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_androidid()) {
      set_androidid(from.androidid());
    }
    if (from.has_deviceandsdkversion()) {
      set_deviceandsdkversion(from.deviceandsdkversion());
    }
    if (from.has_userlanguage()) {
      set_userlanguage(from.userlanguage());
    }
    if (from.has_usercountry()) {
      set_usercountry(from.usercountry());
    }
    if (from.has_operatoralpha()) {
      set_operatoralpha(from.operatoralpha());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_simoperatoralpha()) {
      set_simoperatoralpha(from.simoperatoralpha());
    }
    if (from.has_operatornumeric()) {
      set_operatornumeric(from.operatornumeric());
    }
    if (from.has_simoperatornumeric()) {
      set_simoperatornumeric(from.simoperatornumeric());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestContext::CopyFrom(const RequestContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RequestContext::Swap(RequestContext* other) {
  if (other != this) {
    std::swap(authsubtoken_, other->authsubtoken_);
    std::swap(issecure_, other->issecure_);
    std::swap(version_, other->version_);
    std::swap(androidid_, other->androidid_);
    std::swap(deviceandsdkversion_, other->deviceandsdkversion_);
    std::swap(userlanguage_, other->userlanguage_);
    std::swap(usercountry_, other->usercountry_);
    std::swap(operatoralpha_, other->operatoralpha_);
    std::swap(simoperatoralpha_, other->simoperatoralpha_);
    std::swap(operatornumeric_, other->operatornumeric_);
    std::swap(simoperatornumeric_, other->simoperatornumeric_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestContext_descriptor_;
  metadata.reflection = RequestContext_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetImageRequest_AppImageUsage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetImageRequest_AppImageUsage_descriptor_;
}
bool GetImageRequest_AppImageUsage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetImageRequest_AppImageUsage GetImageRequest::ICON;
const GetImageRequest_AppImageUsage GetImageRequest::SCREENSHOT;
const GetImageRequest_AppImageUsage GetImageRequest::SCREENSHOT_THUMBNAIL;
const GetImageRequest_AppImageUsage GetImageRequest::PROMO_BADGE;
const GetImageRequest_AppImageUsage GetImageRequest::BILING_ICON;
const GetImageRequest_AppImageUsage GetImageRequest::AppImageUsage_MIN;
const GetImageRequest_AppImageUsage GetImageRequest::AppImageUsage_MAX;
const int GetImageRequest::AppImageUsage_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetImageRequest::kAppIdFieldNumber;
const int GetImageRequest::kImageUsageFieldNumber;
const int GetImageRequest::kImageIdFieldNumber;
#endif  // !_MSC_VER

GetImageRequest::GetImageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetImageRequest::InitAsDefaultInstance() {
}

GetImageRequest::GetImageRequest(const GetImageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetImageRequest::SharedCtor() {
  _cached_size_ = 0;
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageusage_ = 0;
  imageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetImageRequest::~GetImageRequest() {
  SharedDtor();
}

void GetImageRequest::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (imageid_ != &::google::protobuf::internal::kEmptyString) {
    delete imageid_;
  }
  if (this != default_instance_) {
  }
}

void GetImageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetImageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetImageRequest_descriptor_;
}

const GetImageRequest& GetImageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

GetImageRequest* GetImageRequest::default_instance_ = NULL;

GetImageRequest* GetImageRequest::New() const {
  return new GetImageRequest;
}

void GetImageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    imageusage_ = 0;
    if (has_imageid()) {
      if (imageid_ != &::google::protobuf::internal::kEmptyString) {
        imageid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_imageUsage;
        break;
      }
      
      // optional .GetImageRequest.AppImageUsage imageUsage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageUsage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GetImageRequest_AppImageUsage_IsValid(value)) {
            set_imageusage(static_cast< ::GetImageRequest_AppImageUsage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_imageId;
        break;
      }
      
      // optional string imageId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageid().data(), this->imageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appid(), output);
  }
  
  // optional .GetImageRequest.AppImageUsage imageUsage = 3;
  if (has_imageusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->imageusage(), output);
  }
  
  // optional string imageId = 4;
  if (has_imageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageid().data(), this->imageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->imageid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetImageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appid(), target);
  }
  
  // optional .GetImageRequest.AppImageUsage imageUsage = 3;
  if (has_imageusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->imageusage(), target);
  }
  
  // optional string imageId = 4;
  if (has_imageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageid().data(), this->imageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->imageid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetImageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }
    
    // optional .GetImageRequest.AppImageUsage imageUsage = 3;
    if (has_imageusage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imageusage());
    }
    
    // optional string imageId = 4;
    if (has_imageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetImageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetImageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetImageRequest::MergeFrom(const GetImageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_imageusage()) {
      set_imageusage(from.imageusage());
    }
    if (from.has_imageid()) {
      set_imageid(from.imageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImageRequest::CopyFrom(const GetImageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageRequest::IsInitialized() const {
  
  return true;
}

void GetImageRequest::Swap(GetImageRequest* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(imageusage_, other->imageusage_);
    std::swap(imageid_, other->imageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetImageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetImageRequest_descriptor_;
  metadata.reflection = GetImageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAssetRequest::kAssetIdFieldNumber;
const int GetAssetRequest::kDirectDownloadKeyFieldNumber;
#endif  // !_MSC_VER

GetAssetRequest::GetAssetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAssetRequest::InitAsDefaultInstance() {
}

GetAssetRequest::GetAssetRequest(const GetAssetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAssetRequest::SharedCtor() {
  _cached_size_ = 0;
  assetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  directdownloadkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAssetRequest::~GetAssetRequest() {
  SharedDtor();
}

void GetAssetRequest::SharedDtor() {
  if (assetid_ != &::google::protobuf::internal::kEmptyString) {
    delete assetid_;
  }
  if (directdownloadkey_ != &::google::protobuf::internal::kEmptyString) {
    delete directdownloadkey_;
  }
  if (this != default_instance_) {
  }
}

void GetAssetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAssetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAssetRequest_descriptor_;
}

const GetAssetRequest& GetAssetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

GetAssetRequest* GetAssetRequest::default_instance_ = NULL;

GetAssetRequest* GetAssetRequest::New() const {
  return new GetAssetRequest;
}

void GetAssetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_assetid()) {
      if (assetid_ != &::google::protobuf::internal::kEmptyString) {
        assetid_->clear();
      }
    }
    if (has_directdownloadkey()) {
      if (directdownloadkey_ != &::google::protobuf::internal::kEmptyString) {
        directdownloadkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAssetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string assetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assetid().data(), this->assetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_directDownloadKey;
        break;
      }
      
      // optional string directDownloadKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directDownloadKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directdownloadkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directdownloadkey().data(), this->directdownloadkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAssetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string assetId = 1;
  if (has_assetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetid().data(), this->assetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->assetid(), output);
  }
  
  // optional string directDownloadKey = 2;
  if (has_directdownloadkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directdownloadkey().data(), this->directdownloadkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->directdownloadkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAssetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string assetId = 1;
  if (has_assetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetid().data(), this->assetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->assetid(), target);
  }
  
  // optional string directDownloadKey = 2;
  if (has_directdownloadkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directdownloadkey().data(), this->directdownloadkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directdownloadkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAssetRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string assetId = 1;
    if (has_assetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetid());
    }
    
    // optional string directDownloadKey = 2;
    if (has_directdownloadkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directdownloadkey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAssetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAssetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAssetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAssetRequest::MergeFrom(const GetAssetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assetid()) {
      set_assetid(from.assetid());
    }
    if (from.has_directdownloadkey()) {
      set_directdownloadkey(from.directdownloadkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAssetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAssetRequest::CopyFrom(const GetAssetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetAssetRequest::Swap(GetAssetRequest* other) {
  if (other != this) {
    std::swap(assetid_, other->assetid_);
    std::swap(directdownloadkey_, other->directdownloadkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAssetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAssetRequest_descriptor_;
  metadata.reflection = GetAssetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetImageResponse::kImageDataFieldNumber;
#endif  // !_MSC_VER

GetImageResponse::GetImageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetImageResponse::InitAsDefaultInstance() {
}

GetImageResponse::GetImageResponse(const GetImageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetImageResponse::SharedCtor() {
  _cached_size_ = 0;
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetImageResponse::~GetImageResponse() {
  SharedDtor();
}

void GetImageResponse::SharedDtor() {
  if (imagedata_ != &::google::protobuf::internal::kEmptyString) {
    delete imagedata_;
  }
  if (this != default_instance_) {
  }
}

void GetImageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetImageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetImageResponse_descriptor_;
}

const GetImageResponse& GetImageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

GetImageResponse* GetImageResponse::default_instance_ = NULL;

GetImageResponse* GetImageResponse::New() const {
  return new GetImageResponse;
}

void GetImageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::kEmptyString) {
        imagedata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetImageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes imageData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetImageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes imageData = 1;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->imagedata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetImageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes imageData = 1;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->imagedata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetImageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes imageData = 1;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetImageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetImageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetImageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetImageResponse::MergeFrom(const GetImageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetImageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImageResponse::CopyFrom(const GetImageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageResponse::IsInitialized() const {
  
  return true;
}

void GetImageResponse::Swap(GetImageResponse* other) {
  if (other != this) {
    std::swap(imagedata_, other->imagedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetImageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetImageResponse_descriptor_;
  metadata.reflection = GetImageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAssetResponse_InstallAsset::kAssetIdFieldNumber;
const int GetAssetResponse_InstallAsset::kAssetNameFieldNumber;
const int GetAssetResponse_InstallAsset::kAssetTypeFieldNumber;
const int GetAssetResponse_InstallAsset::kAssetPackageFieldNumber;
const int GetAssetResponse_InstallAsset::kBlobUrlFieldNumber;
const int GetAssetResponse_InstallAsset::kAssetSignatureFieldNumber;
const int GetAssetResponse_InstallAsset::kAssetSizeFieldNumber;
const int GetAssetResponse_InstallAsset::kRefundTimeoutFieldNumber;
const int GetAssetResponse_InstallAsset::kForwardLockedFieldNumber;
const int GetAssetResponse_InstallAsset::kSecuredFieldNumber;
const int GetAssetResponse_InstallAsset::kVersionCodeFieldNumber;
const int GetAssetResponse_InstallAsset::kDownloadAuthCookieNameFieldNumber;
const int GetAssetResponse_InstallAsset::kDownloadAuthCookieValueFieldNumber;
#endif  // !_MSC_VER

GetAssetResponse_InstallAsset::GetAssetResponse_InstallAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAssetResponse_InstallAsset::InitAsDefaultInstance() {
}

GetAssetResponse_InstallAsset::GetAssetResponse_InstallAsset(const GetAssetResponse_InstallAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAssetResponse_InstallAsset::SharedCtor() {
  _cached_size_ = 0;
  assetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assettype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assetpackage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bloburl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assetsignature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assetsize_ = GOOGLE_ULONGLONG(0);
  refundtimeout_ = GOOGLE_ULONGLONG(0);
  forwardlocked_ = false;
  secured_ = false;
  versioncode_ = 0;
  downloadauthcookiename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadauthcookievalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAssetResponse_InstallAsset::~GetAssetResponse_InstallAsset() {
  SharedDtor();
}

void GetAssetResponse_InstallAsset::SharedDtor() {
  if (assetid_ != &::google::protobuf::internal::kEmptyString) {
    delete assetid_;
  }
  if (assetname_ != &::google::protobuf::internal::kEmptyString) {
    delete assetname_;
  }
  if (assettype_ != &::google::protobuf::internal::kEmptyString) {
    delete assettype_;
  }
  if (assetpackage_ != &::google::protobuf::internal::kEmptyString) {
    delete assetpackage_;
  }
  if (bloburl_ != &::google::protobuf::internal::kEmptyString) {
    delete bloburl_;
  }
  if (assetsignature_ != &::google::protobuf::internal::kEmptyString) {
    delete assetsignature_;
  }
  if (downloadauthcookiename_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadauthcookiename_;
  }
  if (downloadauthcookievalue_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadauthcookievalue_;
  }
  if (this != default_instance_) {
  }
}

void GetAssetResponse_InstallAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAssetResponse_InstallAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAssetResponse_InstallAsset_descriptor_;
}

const GetAssetResponse_InstallAsset& GetAssetResponse_InstallAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

GetAssetResponse_InstallAsset* GetAssetResponse_InstallAsset::default_instance_ = NULL;

GetAssetResponse_InstallAsset* GetAssetResponse_InstallAsset::New() const {
  return new GetAssetResponse_InstallAsset;
}

void GetAssetResponse_InstallAsset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_assetid()) {
      if (assetid_ != &::google::protobuf::internal::kEmptyString) {
        assetid_->clear();
      }
    }
    if (has_assetname()) {
      if (assetname_ != &::google::protobuf::internal::kEmptyString) {
        assetname_->clear();
      }
    }
    if (has_assettype()) {
      if (assettype_ != &::google::protobuf::internal::kEmptyString) {
        assettype_->clear();
      }
    }
    if (has_assetpackage()) {
      if (assetpackage_ != &::google::protobuf::internal::kEmptyString) {
        assetpackage_->clear();
      }
    }
    if (has_bloburl()) {
      if (bloburl_ != &::google::protobuf::internal::kEmptyString) {
        bloburl_->clear();
      }
    }
    if (has_assetsignature()) {
      if (assetsignature_ != &::google::protobuf::internal::kEmptyString) {
        assetsignature_->clear();
      }
    }
    assetsize_ = GOOGLE_ULONGLONG(0);
    refundtimeout_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    forwardlocked_ = false;
    secured_ = false;
    versioncode_ = 0;
    if (has_downloadauthcookiename()) {
      if (downloadauthcookiename_ != &::google::protobuf::internal::kEmptyString) {
        downloadauthcookiename_->clear();
      }
    }
    if (has_downloadauthcookievalue()) {
      if (downloadauthcookievalue_ != &::google::protobuf::internal::kEmptyString) {
        downloadauthcookievalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAssetResponse_InstallAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string assetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assetid().data(), this->assetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_assetName;
        break;
      }
      
      // optional string assetName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assetname().data(), this->assetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_assetType;
        break;
      }
      
      // optional string assetType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assetType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assettype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assettype().data(), this->assettype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_assetPackage;
        break;
      }
      
      // optional string assetPackage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assetPackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpackage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assetpackage().data(), this->assetpackage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_blobUrl;
        break;
      }
      
      // optional string blobUrl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blobUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bloburl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bloburl().data(), this->bloburl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_assetSignature;
        break;
      }
      
      // optional string assetSignature = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assetSignature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetsignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assetsignature().data(), this->assetsignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_assetSize;
        break;
      }
      
      // optional uint64 assetSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assetSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assetsize_)));
          set_has_assetsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_refundTimeout;
        break;
      }
      
      // optional uint64 refundTimeout = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refundTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refundtimeout_)));
          set_has_refundtimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_forwardLocked;
        break;
      }
      
      // optional bool forwardLocked = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forwardLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forwardlocked_)));
          set_has_forwardlocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_secured;
        break;
      }
      
      // optional bool secured = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secured:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secured_)));
          set_has_secured();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_versionCode;
        break;
      }
      
      // optional int32 versionCode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versionCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versioncode_)));
          set_has_versioncode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_downloadAuthCookieName;
        break;
      }
      
      // optional string downloadAuthCookieName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downloadAuthCookieName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadauthcookiename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downloadauthcookiename().data(), this->downloadauthcookiename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_downloadAuthCookieValue;
        break;
      }
      
      // optional string downloadAuthCookieValue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downloadAuthCookieValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadauthcookievalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downloadauthcookievalue().data(), this->downloadauthcookievalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAssetResponse_InstallAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string assetId = 2;
  if (has_assetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetid().data(), this->assetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->assetid(), output);
  }
  
  // optional string assetName = 3;
  if (has_assetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetname().data(), this->assetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->assetname(), output);
  }
  
  // optional string assetType = 4;
  if (has_assettype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assettype().data(), this->assettype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->assettype(), output);
  }
  
  // optional string assetPackage = 5;
  if (has_assetpackage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetpackage().data(), this->assetpackage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->assetpackage(), output);
  }
  
  // optional string blobUrl = 6;
  if (has_bloburl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bloburl().data(), this->bloburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bloburl(), output);
  }
  
  // optional string assetSignature = 7;
  if (has_assetsignature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetsignature().data(), this->assetsignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->assetsignature(), output);
  }
  
  // optional uint64 assetSize = 8;
  if (has_assetsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->assetsize(), output);
  }
  
  // optional uint64 refundTimeout = 9;
  if (has_refundtimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->refundtimeout(), output);
  }
  
  // optional bool forwardLocked = 10;
  if (has_forwardlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->forwardlocked(), output);
  }
  
  // optional bool secured = 11;
  if (has_secured()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->secured(), output);
  }
  
  // optional int32 versionCode = 12;
  if (has_versioncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->versioncode(), output);
  }
  
  // optional string downloadAuthCookieName = 13;
  if (has_downloadauthcookiename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadauthcookiename().data(), this->downloadauthcookiename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->downloadauthcookiename(), output);
  }
  
  // optional string downloadAuthCookieValue = 14;
  if (has_downloadauthcookievalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadauthcookievalue().data(), this->downloadauthcookievalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->downloadauthcookievalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAssetResponse_InstallAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string assetId = 2;
  if (has_assetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetid().data(), this->assetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->assetid(), target);
  }
  
  // optional string assetName = 3;
  if (has_assetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetname().data(), this->assetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->assetname(), target);
  }
  
  // optional string assetType = 4;
  if (has_assettype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assettype().data(), this->assettype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->assettype(), target);
  }
  
  // optional string assetPackage = 5;
  if (has_assetpackage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetpackage().data(), this->assetpackage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->assetpackage(), target);
  }
  
  // optional string blobUrl = 6;
  if (has_bloburl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bloburl().data(), this->bloburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bloburl(), target);
  }
  
  // optional string assetSignature = 7;
  if (has_assetsignature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assetsignature().data(), this->assetsignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->assetsignature(), target);
  }
  
  // optional uint64 assetSize = 8;
  if (has_assetsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->assetsize(), target);
  }
  
  // optional uint64 refundTimeout = 9;
  if (has_refundtimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->refundtimeout(), target);
  }
  
  // optional bool forwardLocked = 10;
  if (has_forwardlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->forwardlocked(), target);
  }
  
  // optional bool secured = 11;
  if (has_secured()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->secured(), target);
  }
  
  // optional int32 versionCode = 12;
  if (has_versioncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->versioncode(), target);
  }
  
  // optional string downloadAuthCookieName = 13;
  if (has_downloadauthcookiename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadauthcookiename().data(), this->downloadauthcookiename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->downloadauthcookiename(), target);
  }
  
  // optional string downloadAuthCookieValue = 14;
  if (has_downloadauthcookievalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadauthcookievalue().data(), this->downloadauthcookievalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->downloadauthcookievalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAssetResponse_InstallAsset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string assetId = 2;
    if (has_assetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetid());
    }
    
    // optional string assetName = 3;
    if (has_assetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetname());
    }
    
    // optional string assetType = 4;
    if (has_assettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assettype());
    }
    
    // optional string assetPackage = 5;
    if (has_assetpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpackage());
    }
    
    // optional string blobUrl = 6;
    if (has_bloburl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bloburl());
    }
    
    // optional string assetSignature = 7;
    if (has_assetsignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetsignature());
    }
    
    // optional uint64 assetSize = 8;
    if (has_assetsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assetsize());
    }
    
    // optional uint64 refundTimeout = 9;
    if (has_refundtimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refundtimeout());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool forwardLocked = 10;
    if (has_forwardlocked()) {
      total_size += 1 + 1;
    }
    
    // optional bool secured = 11;
    if (has_secured()) {
      total_size += 1 + 1;
    }
    
    // optional int32 versionCode = 12;
    if (has_versioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versioncode());
    }
    
    // optional string downloadAuthCookieName = 13;
    if (has_downloadauthcookiename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadauthcookiename());
    }
    
    // optional string downloadAuthCookieValue = 14;
    if (has_downloadauthcookievalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadauthcookievalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAssetResponse_InstallAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAssetResponse_InstallAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAssetResponse_InstallAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAssetResponse_InstallAsset::MergeFrom(const GetAssetResponse_InstallAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assetid()) {
      set_assetid(from.assetid());
    }
    if (from.has_assetname()) {
      set_assetname(from.assetname());
    }
    if (from.has_assettype()) {
      set_assettype(from.assettype());
    }
    if (from.has_assetpackage()) {
      set_assetpackage(from.assetpackage());
    }
    if (from.has_bloburl()) {
      set_bloburl(from.bloburl());
    }
    if (from.has_assetsignature()) {
      set_assetsignature(from.assetsignature());
    }
    if (from.has_assetsize()) {
      set_assetsize(from.assetsize());
    }
    if (from.has_refundtimeout()) {
      set_refundtimeout(from.refundtimeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_forwardlocked()) {
      set_forwardlocked(from.forwardlocked());
    }
    if (from.has_secured()) {
      set_secured(from.secured());
    }
    if (from.has_versioncode()) {
      set_versioncode(from.versioncode());
    }
    if (from.has_downloadauthcookiename()) {
      set_downloadauthcookiename(from.downloadauthcookiename());
    }
    if (from.has_downloadauthcookievalue()) {
      set_downloadauthcookievalue(from.downloadauthcookievalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAssetResponse_InstallAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAssetResponse_InstallAsset::CopyFrom(const GetAssetResponse_InstallAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetResponse_InstallAsset::IsInitialized() const {
  
  return true;
}

void GetAssetResponse_InstallAsset::Swap(GetAssetResponse_InstallAsset* other) {
  if (other != this) {
    std::swap(assetid_, other->assetid_);
    std::swap(assetname_, other->assetname_);
    std::swap(assettype_, other->assettype_);
    std::swap(assetpackage_, other->assetpackage_);
    std::swap(bloburl_, other->bloburl_);
    std::swap(assetsignature_, other->assetsignature_);
    std::swap(assetsize_, other->assetsize_);
    std::swap(refundtimeout_, other->refundtimeout_);
    std::swap(forwardlocked_, other->forwardlocked_);
    std::swap(secured_, other->secured_);
    std::swap(versioncode_, other->versioncode_);
    std::swap(downloadauthcookiename_, other->downloadauthcookiename_);
    std::swap(downloadauthcookievalue_, other->downloadauthcookievalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAssetResponse_InstallAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAssetResponse_InstallAsset_descriptor_;
  metadata.reflection = GetAssetResponse_InstallAsset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetAssetResponse::kInstallassetFieldNumber;
#endif  // !_MSC_VER

GetAssetResponse::GetAssetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAssetResponse::InitAsDefaultInstance() {
}

GetAssetResponse::GetAssetResponse(const GetAssetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAssetResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAssetResponse::~GetAssetResponse() {
  SharedDtor();
}

void GetAssetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAssetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAssetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAssetResponse_descriptor_;
}

const GetAssetResponse& GetAssetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

GetAssetResponse* GetAssetResponse::default_instance_ = NULL;

GetAssetResponse* GetAssetResponse::New() const {
  return new GetAssetResponse;
}

void GetAssetResponse::Clear() {
  installasset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAssetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group InstallAsset = 1 {
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_installasset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                1, input, add_installasset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(11)) goto parse_installasset;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAssetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated group InstallAsset = 1 {
  for (int i = 0; i < this->installasset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      1, this->installasset(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAssetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated group InstallAsset = 1 {
  for (int i = 0; i < this->installasset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        1, this->installasset(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAssetResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated group InstallAsset = 1 {
  total_size += 2 * this->installasset_size();
  for (int i = 0; i < this->installasset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->installasset(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAssetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAssetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAssetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAssetResponse::MergeFrom(const GetAssetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  installasset_.MergeFrom(from.installasset_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAssetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAssetResponse::CopyFrom(const GetAssetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetResponse::IsInitialized() const {
  
  return true;
}

void GetAssetResponse::Swap(GetAssetResponse* other) {
  if (other != this) {
    installasset_.Swap(&other->installasset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAssetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAssetResponse_descriptor_;
  metadata.reflection = GetAssetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request_RequestGroup::kAppsRequestFieldNumber;
const int Request_RequestGroup::kCommentsRequestFieldNumber;
const int Request_RequestGroup::kGetAssetRequestFieldNumber;
const int Request_RequestGroup::kImageRequestFieldNumber;
const int Request_RequestGroup::kSubCategoriesRequestFieldNumber;
const int Request_RequestGroup::kCategoriesRequestFieldNumber;
#endif  // !_MSC_VER

Request_RequestGroup::Request_RequestGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request_RequestGroup::InitAsDefaultInstance() {
  appsrequest_ = const_cast< ::AppsRequest*>(&::AppsRequest::default_instance());
  commentsrequest_ = const_cast< ::CommentsRequest*>(&::CommentsRequest::default_instance());
  getassetrequest_ = const_cast< ::GetAssetRequest*>(&::GetAssetRequest::default_instance());
  imagerequest_ = const_cast< ::GetImageRequest*>(&::GetImageRequest::default_instance());
  subcategoriesrequest_ = const_cast< ::SubCategoriesRequest*>(&::SubCategoriesRequest::default_instance());
  categoriesrequest_ = const_cast< ::CategoriesRequest*>(&::CategoriesRequest::default_instance());
}

Request_RequestGroup::Request_RequestGroup(const Request_RequestGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request_RequestGroup::SharedCtor() {
  _cached_size_ = 0;
  appsrequest_ = NULL;
  commentsrequest_ = NULL;
  getassetrequest_ = NULL;
  imagerequest_ = NULL;
  subcategoriesrequest_ = NULL;
  categoriesrequest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_RequestGroup::~Request_RequestGroup() {
  SharedDtor();
}

void Request_RequestGroup::SharedDtor() {
  if (this != default_instance_) {
    delete appsrequest_;
    delete commentsrequest_;
    delete getassetrequest_;
    delete imagerequest_;
    delete subcategoriesrequest_;
    delete categoriesrequest_;
  }
}

void Request_RequestGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_RequestGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RequestGroup_descriptor_;
}

const Request_RequestGroup& Request_RequestGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

Request_RequestGroup* Request_RequestGroup::default_instance_ = NULL;

Request_RequestGroup* Request_RequestGroup::New() const {
  return new Request_RequestGroup;
}

void Request_RequestGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appsrequest()) {
      if (appsrequest_ != NULL) appsrequest_->::AppsRequest::Clear();
    }
    if (has_commentsrequest()) {
      if (commentsrequest_ != NULL) commentsrequest_->::CommentsRequest::Clear();
    }
    if (has_getassetrequest()) {
      if (getassetrequest_ != NULL) getassetrequest_->::GetAssetRequest::Clear();
    }
    if (has_imagerequest()) {
      if (imagerequest_ != NULL) imagerequest_->::GetImageRequest::Clear();
    }
    if (has_subcategoriesrequest()) {
      if (subcategoriesrequest_ != NULL) subcategoriesrequest_->::SubCategoriesRequest::Clear();
    }
    if (has_categoriesrequest()) {
      if (categoriesrequest_ != NULL) categoriesrequest_->::CategoriesRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_RequestGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AppsRequest appsRequest = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appsrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commentsRequest;
        break;
      }
      
      // optional .CommentsRequest commentsRequest = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commentsRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commentsrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_getAssetRequest;
        break;
      }
      
      // optional .GetAssetRequest getAssetRequest = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getAssetRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getassetrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_imageRequest;
        break;
      }
      
      // optional .GetImageRequest imageRequest = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagerequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_subCategoriesRequest;
        break;
      }
      
      // optional .SubCategoriesRequest subCategoriesRequest = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subCategoriesRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcategoriesrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_categoriesRequest;
        break;
      }
      
      // optional .CategoriesRequest categoriesRequest = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categoriesRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_categoriesrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request_RequestGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AppsRequest appsRequest = 4;
  if (has_appsrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->appsrequest(), output);
  }
  
  // optional .CommentsRequest commentsRequest = 5;
  if (has_commentsrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->commentsrequest(), output);
  }
  
  // optional .GetAssetRequest getAssetRequest = 10;
  if (has_getassetrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->getassetrequest(), output);
  }
  
  // optional .GetImageRequest imageRequest = 11;
  if (has_imagerequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->imagerequest(), output);
  }
  
  // optional .SubCategoriesRequest subCategoriesRequest = 14;
  if (has_subcategoriesrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->subcategoriesrequest(), output);
  }
  
  // optional .CategoriesRequest categoriesRequest = 21;
  if (has_categoriesrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->categoriesrequest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request_RequestGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AppsRequest appsRequest = 4;
  if (has_appsrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->appsrequest(), target);
  }
  
  // optional .CommentsRequest commentsRequest = 5;
  if (has_commentsrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->commentsrequest(), target);
  }
  
  // optional .GetAssetRequest getAssetRequest = 10;
  if (has_getassetrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->getassetrequest(), target);
  }
  
  // optional .GetImageRequest imageRequest = 11;
  if (has_imagerequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->imagerequest(), target);
  }
  
  // optional .SubCategoriesRequest subCategoriesRequest = 14;
  if (has_subcategoriesrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->subcategoriesrequest(), target);
  }
  
  // optional .CategoriesRequest categoriesRequest = 21;
  if (has_categoriesrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->categoriesrequest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request_RequestGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AppsRequest appsRequest = 4;
    if (has_appsrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appsrequest());
    }
    
    // optional .CommentsRequest commentsRequest = 5;
    if (has_commentsrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commentsrequest());
    }
    
    // optional .GetAssetRequest getAssetRequest = 10;
    if (has_getassetrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getassetrequest());
    }
    
    // optional .GetImageRequest imageRequest = 11;
    if (has_imagerequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagerequest());
    }
    
    // optional .SubCategoriesRequest subCategoriesRequest = 14;
    if (has_subcategoriesrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcategoriesrequest());
    }
    
    // optional .CategoriesRequest categoriesRequest = 21;
    if (has_categoriesrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categoriesrequest());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_RequestGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_RequestGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_RequestGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_RequestGroup::MergeFrom(const Request_RequestGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appsrequest()) {
      mutable_appsrequest()->::AppsRequest::MergeFrom(from.appsrequest());
    }
    if (from.has_commentsrequest()) {
      mutable_commentsrequest()->::CommentsRequest::MergeFrom(from.commentsrequest());
    }
    if (from.has_getassetrequest()) {
      mutable_getassetrequest()->::GetAssetRequest::MergeFrom(from.getassetrequest());
    }
    if (from.has_imagerequest()) {
      mutable_imagerequest()->::GetImageRequest::MergeFrom(from.imagerequest());
    }
    if (from.has_subcategoriesrequest()) {
      mutable_subcategoriesrequest()->::SubCategoriesRequest::MergeFrom(from.subcategoriesrequest());
    }
    if (from.has_categoriesrequest()) {
      mutable_categoriesrequest()->::CategoriesRequest::MergeFrom(from.categoriesrequest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_RequestGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_RequestGroup::CopyFrom(const Request_RequestGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_RequestGroup::IsInitialized() const {
  
  if (has_getassetrequest()) {
    if (!this->getassetrequest().IsInitialized()) return false;
  }
  return true;
}

void Request_RequestGroup::Swap(Request_RequestGroup* other) {
  if (other != this) {
    std::swap(appsrequest_, other->appsrequest_);
    std::swap(commentsrequest_, other->commentsrequest_);
    std::swap(getassetrequest_, other->getassetrequest_);
    std::swap(imagerequest_, other->imagerequest_);
    std::swap(subcategoriesrequest_, other->subcategoriesrequest_);
    std::swap(categoriesrequest_, other->categoriesrequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_RequestGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_RequestGroup_descriptor_;
  metadata.reflection = Request_RequestGroup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kContextFieldNumber;
const int Request::kRequestgroupFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  context_ = const_cast< ::RequestContext*>(&::RequestContext::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  context_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_context()) {
      if (context_ != NULL) context_->::RequestContext::Clear();
    }
  }
  requestgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RequestContext context = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_requestgroup;
        break;
      }
      
      // repeated group RequestGroup = 2 {
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_requestgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, add_requestgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_requestgroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RequestContext context = 1;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->context(), output);
  }
  
  // repeated group RequestGroup = 2 {
  for (int i = 0; i < this->requestgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, this->requestgroup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RequestContext context = 1;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->context(), target);
  }
  
  // repeated group RequestGroup = 2 {
  for (int i = 0; i < this->requestgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        2, this->requestgroup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RequestContext context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->context());
    }
    
  }
  // repeated group RequestGroup = 2 {
  total_size += 2 * this->requestgroup_size();
  for (int i = 0; i < this->requestgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->requestgroup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  requestgroup_.MergeFrom(from.requestgroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context()) {
      mutable_context()->::RequestContext::MergeFrom(from.context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  
  if (has_context()) {
    if (!this->context().IsInitialized()) return false;
  }
  for (int i = 0; i < requestgroup_size(); i++) {
    if (!this->requestgroup(i).IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    requestgroup_.Swap(&other->requestgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseContext_ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseContext_ResultType_descriptor_;
}
bool ResponseContext_ResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseContext_ResultType ResponseContext::OK;
const ResponseContext_ResultType ResponseContext::BAD_REQUEST;
const ResponseContext_ResultType ResponseContext::INTERNAL_SERVICE_ERROR;
const ResponseContext_ResultType ResponseContext::NOT_MODIFIED;
const ResponseContext_ResultType ResponseContext::USER_INPUT_ERROR;
const ResponseContext_ResultType ResponseContext::ResultType_MIN;
const ResponseContext_ResultType ResponseContext::ResultType_MAX;
const int ResponseContext::ResultType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResponseContext::kResultFieldNumber;
const int ResponseContext::kMaxAgeFieldNumber;
const int ResponseContext::kEtagFieldNumber;
const int ResponseContext::kServerVersionFieldNumber;
#endif  // !_MSC_VER

ResponseContext::ResponseContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseContext::InitAsDefaultInstance() {
}

ResponseContext::ResponseContext(const ResponseContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseContext::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  maxage_ = 0;
  etag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverversion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseContext::~ResponseContext() {
  SharedDtor();
}

void ResponseContext::SharedDtor() {
  if (etag_ != &::google::protobuf::internal::kEmptyString) {
    delete etag_;
  }
  if (this != default_instance_) {
  }
}

void ResponseContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseContext_descriptor_;
}

const ResponseContext& ResponseContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

ResponseContext* ResponseContext::default_instance_ = NULL;

ResponseContext* ResponseContext::New() const {
  return new ResponseContext;
}

void ResponseContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    maxage_ = 0;
    if (has_etag()) {
      if (etag_ != &::google::protobuf::internal::kEmptyString) {
        etag_->clear();
      }
    }
    serverversion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseContext.ResultType result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ResponseContext_ResultType_IsValid(value)) {
            set_result(static_cast< ::ResponseContext_ResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxAge;
        break;
      }
      
      // optional int32 maxAge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxAge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxage_)));
          set_has_maxage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_etag;
        break;
      }
      
      // optional string etag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_etag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->etag().data(), this->etag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverVersion;
        break;
      }
      
      // optional int32 serverVersion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverversion_)));
          set_has_serverversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ResponseContext.ResultType result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }
  
  // optional int32 maxAge = 2;
  if (has_maxage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxage(), output);
  }
  
  // optional string etag = 3;
  if (has_etag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etag().data(), this->etag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->etag(), output);
  }
  
  // optional int32 serverVersion = 4;
  if (has_serverversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serverversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ResponseContext.ResultType result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }
  
  // optional int32 maxAge = 2;
  if (has_maxage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxage(), target);
  }
  
  // optional string etag = 3;
  if (has_etag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etag().data(), this->etag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->etag(), target);
  }
  
  // optional int32 serverVersion = 4;
  if (has_serverversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serverversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseContext::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ResponseContext.ResultType result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
    // optional int32 maxAge = 2;
    if (has_maxage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxage());
    }
    
    // optional string etag = 3;
    if (has_etag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etag());
    }
    
    // optional int32 serverVersion = 4;
    if (has_serverversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverversion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseContext::MergeFrom(const ResponseContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_maxage()) {
      set_maxage(from.maxage());
    }
    if (from.has_etag()) {
      set_etag(from.etag());
    }
    if (from.has_serverversion()) {
      set_serverversion(from.serverversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseContext::CopyFrom(const ResponseContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseContext::IsInitialized() const {
  
  return true;
}

void ResponseContext::Swap(ResponseContext* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(maxage_, other->maxage_);
    std::swap(etag_, other->etag_);
    std::swap(serverversion_, other->serverversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseContext_descriptor_;
  metadata.reflection = ResponseContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response_ResponseGroup::kContextFieldNumber;
const int Response_ResponseGroup::kAppsResponseFieldNumber;
const int Response_ResponseGroup::kCommentsResponseFieldNumber;
const int Response_ResponseGroup::kGetAssetResponseFieldNumber;
const int Response_ResponseGroup::kImageResponseFieldNumber;
const int Response_ResponseGroup::kCategoriesResponseFieldNumber;
const int Response_ResponseGroup::kSubCategoriesResponseFieldNumber;
#endif  // !_MSC_VER

Response_ResponseGroup::Response_ResponseGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response_ResponseGroup::InitAsDefaultInstance() {
  context_ = const_cast< ::ResponseContext*>(&::ResponseContext::default_instance());
  appsresponse_ = const_cast< ::AppsResponse*>(&::AppsResponse::default_instance());
  commentsresponse_ = const_cast< ::CommentsResponse*>(&::CommentsResponse::default_instance());
  getassetresponse_ = const_cast< ::GetAssetResponse*>(&::GetAssetResponse::default_instance());
  imageresponse_ = const_cast< ::GetImageResponse*>(&::GetImageResponse::default_instance());
  categoriesresponse_ = const_cast< ::CategoriesResponse*>(&::CategoriesResponse::default_instance());
  subcategoriesresponse_ = const_cast< ::SubCategoriesResponse*>(&::SubCategoriesResponse::default_instance());
}

Response_ResponseGroup::Response_ResponseGroup(const Response_ResponseGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response_ResponseGroup::SharedCtor() {
  _cached_size_ = 0;
  context_ = NULL;
  appsresponse_ = NULL;
  commentsresponse_ = NULL;
  getassetresponse_ = NULL;
  imageresponse_ = NULL;
  categoriesresponse_ = NULL;
  subcategoriesresponse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_ResponseGroup::~Response_ResponseGroup() {
  SharedDtor();
}

void Response_ResponseGroup::SharedDtor() {
  if (this != default_instance_) {
    delete context_;
    delete appsresponse_;
    delete commentsresponse_;
    delete getassetresponse_;
    delete imageresponse_;
    delete categoriesresponse_;
    delete subcategoriesresponse_;
  }
}

void Response_ResponseGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_ResponseGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ResponseGroup_descriptor_;
}

const Response_ResponseGroup& Response_ResponseGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

Response_ResponseGroup* Response_ResponseGroup::default_instance_ = NULL;

Response_ResponseGroup* Response_ResponseGroup::New() const {
  return new Response_ResponseGroup;
}

void Response_ResponseGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_context()) {
      if (context_ != NULL) context_->::ResponseContext::Clear();
    }
    if (has_appsresponse()) {
      if (appsresponse_ != NULL) appsresponse_->::AppsResponse::Clear();
    }
    if (has_commentsresponse()) {
      if (commentsresponse_ != NULL) commentsresponse_->::CommentsResponse::Clear();
    }
    if (has_getassetresponse()) {
      if (getassetresponse_ != NULL) getassetresponse_->::GetAssetResponse::Clear();
    }
    if (has_imageresponse()) {
      if (imageresponse_ != NULL) imageresponse_->::GetImageResponse::Clear();
    }
    if (has_categoriesresponse()) {
      if (categoriesresponse_ != NULL) categoriesresponse_->::CategoriesResponse::Clear();
    }
    if (has_subcategoriesresponse()) {
      if (subcategoriesresponse_ != NULL) subcategoriesresponse_->::SubCategoriesResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_ResponseGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseContext context = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appsResponse;
        break;
      }
      
      // optional .AppsResponse appsResponse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appsResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appsresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_commentsResponse;
        break;
      }
      
      // optional .CommentsResponse commentsResponse = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commentsResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commentsresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_getAssetResponse;
        break;
      }
      
      // optional .GetAssetResponse getAssetResponse = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getAssetResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getassetresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_imageResponse;
        break;
      }
      
      // optional .GetImageResponse imageResponse = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_subCategoriesResponse;
        break;
      }
      
      // optional .SubCategoriesResponse subCategoriesResponse = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subCategoriesResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcategoriesresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_categoriesResponse;
        break;
      }
      
      // optional .CategoriesResponse categoriesResponse = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categoriesResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_categoriesresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response_ResponseGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ResponseContext context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->context(), output);
  }
  
  // optional .AppsResponse appsResponse = 3;
  if (has_appsresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->appsresponse(), output);
  }
  
  // optional .CommentsResponse commentsResponse = 4;
  if (has_commentsresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->commentsresponse(), output);
  }
  
  // optional .GetAssetResponse getAssetResponse = 9;
  if (has_getassetresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->getassetresponse(), output);
  }
  
  // optional .GetImageResponse imageResponse = 10;
  if (has_imageresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->imageresponse(), output);
  }
  
  // optional .SubCategoriesResponse subCategoriesResponse = 13;
  if (has_subcategoriesresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->subcategoriesresponse(), output);
  }
  
  // optional .CategoriesResponse categoriesResponse = 20;
  if (has_categoriesresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->categoriesresponse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response_ResponseGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ResponseContext context = 2;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->context(), target);
  }
  
  // optional .AppsResponse appsResponse = 3;
  if (has_appsresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->appsresponse(), target);
  }
  
  // optional .CommentsResponse commentsResponse = 4;
  if (has_commentsresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->commentsresponse(), target);
  }
  
  // optional .GetAssetResponse getAssetResponse = 9;
  if (has_getassetresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->getassetresponse(), target);
  }
  
  // optional .GetImageResponse imageResponse = 10;
  if (has_imageresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->imageresponse(), target);
  }
  
  // optional .SubCategoriesResponse subCategoriesResponse = 13;
  if (has_subcategoriesresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->subcategoriesresponse(), target);
  }
  
  // optional .CategoriesResponse categoriesResponse = 20;
  if (has_categoriesresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->categoriesresponse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response_ResponseGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ResponseContext context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->context());
    }
    
    // optional .AppsResponse appsResponse = 3;
    if (has_appsresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appsresponse());
    }
    
    // optional .CommentsResponse commentsResponse = 4;
    if (has_commentsresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commentsresponse());
    }
    
    // optional .GetAssetResponse getAssetResponse = 9;
    if (has_getassetresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getassetresponse());
    }
    
    // optional .GetImageResponse imageResponse = 10;
    if (has_imageresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imageresponse());
    }
    
    // optional .CategoriesResponse categoriesResponse = 20;
    if (has_categoriesresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categoriesresponse());
    }
    
    // optional .SubCategoriesResponse subCategoriesResponse = 13;
    if (has_subcategoriesresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcategoriesresponse());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_ResponseGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_ResponseGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_ResponseGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_ResponseGroup::MergeFrom(const Response_ResponseGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context()) {
      mutable_context()->::ResponseContext::MergeFrom(from.context());
    }
    if (from.has_appsresponse()) {
      mutable_appsresponse()->::AppsResponse::MergeFrom(from.appsresponse());
    }
    if (from.has_commentsresponse()) {
      mutable_commentsresponse()->::CommentsResponse::MergeFrom(from.commentsresponse());
    }
    if (from.has_getassetresponse()) {
      mutable_getassetresponse()->::GetAssetResponse::MergeFrom(from.getassetresponse());
    }
    if (from.has_imageresponse()) {
      mutable_imageresponse()->::GetImageResponse::MergeFrom(from.imageresponse());
    }
    if (from.has_categoriesresponse()) {
      mutable_categoriesresponse()->::CategoriesResponse::MergeFrom(from.categoriesresponse());
    }
    if (from.has_subcategoriesresponse()) {
      mutable_subcategoriesresponse()->::SubCategoriesResponse::MergeFrom(from.subcategoriesresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_ResponseGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_ResponseGroup::CopyFrom(const Response_ResponseGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ResponseGroup::IsInitialized() const {
  
  return true;
}

void Response_ResponseGroup::Swap(Response_ResponseGroup* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(appsresponse_, other->appsresponse_);
    std::swap(commentsresponse_, other->commentsresponse_);
    std::swap(getassetresponse_, other->getassetresponse_);
    std::swap(imageresponse_, other->imageresponse_);
    std::swap(categoriesresponse_, other->categoriesresponse_);
    std::swap(subcategoriesresponse_, other->subcategoriesresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_ResponseGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_ResponseGroup_descriptor_;
  metadata.reflection = Response_ResponseGroup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response::kResponsegroupFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_market_2eproto();  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  responsegroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group ResponseGroup = 1 {
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_responsegroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                1, input, add_responsegroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(11)) goto parse_responsegroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated group ResponseGroup = 1 {
  for (int i = 0; i < this->responsegroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      1, this->responsegroup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated group ResponseGroup = 1 {
  for (int i = 0; i < this->responsegroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        1, this->responsegroup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;
  
  // repeated group ResponseGroup = 1 {
  total_size += 2 * this->responsegroup_size();
  for (int i = 0; i < this->responsegroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->responsegroup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  responsegroup_.MergeFrom(from.responsegroup_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    responsegroup_.Swap(&other->responsegroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
